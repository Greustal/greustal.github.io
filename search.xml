<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言学习笔记（四）— 括号匹配算法</title>
      <link href="/2023/07/21/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/07/21/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="括号匹配算法">括号匹配算法</h1><p><img src="/2023/07/21/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/191D0B1FA156A1B6C41464840D56D516.png" alt="191D0B1FA156A1B6C41464840D56D516" style="zoom:50%;"></p><h2 id="直接用数组">直接用数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize  10  <span class="comment">//定义全局变量不需要等号和分号</span></span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">bracketMatch</span><span class="params">(<span class="type">char</span> s[], <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">char</span> <span class="built_in">stack</span>[MaxSize];</span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;   <span class="comment">//初始化指针为-1，指向栈顶元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;[&#x27;</span>||s[i]==<span class="string">&#x27;&#123;&#x27;</span>||s[i]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">stack</span>[++top] = s[i]; <span class="comment">//先+1，指向0，再赋值</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(top ==<span class="number">-1</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">stack</span>[top] == <span class="string">&#x27;[&#x27;</span> &amp;&amp; s[i]==<span class="string">&#x27;]&#x27;</span> || <span class="built_in">stack</span>[top] == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; s[i]==<span class="string">&#x27;&#125;&#x27;</span> || <span class="built_in">stack</span>[top] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; s[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                top--;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;size);</span><br><span class="line">    <span class="type">char</span> s[size];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="type">bool</span> a = bracketMatch(s,size);</span><br><span class="line">    <span class="keyword">if</span>(a)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;matching sucessfully&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;matching failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用顺序栈">使用顺序栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="comment">//定义基本操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack &amp;s)</span>&#123;</span><br><span class="line">    s.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">StackEmpty</span><span class="params">(SaStack s)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;s,<span class="type">char</span> e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==MaxSize<span class="number">-1</span>)&#123;  <span class="comment">//栈满报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.data[++s.top] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;s, <span class="type">char</span> &amp;e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top == <span class="number">-1</span>)&#123;     <span class="comment">//栈空报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = s.data[s.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">bracketMatch</span><span class="params">(<span class="type">char</span> s[],<span class="type">int</span> len)</span>&#123;</span><br><span class="line">    SqStack <span class="built_in">stack</span>;</span><br><span class="line">    InitStack(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;[&#x27;</span>||s[i]==<span class="string">&#x27;&#123;&#x27;</span>||s[i]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            Push(<span class="built_in">stack</span>,s[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(StackEmpty(<span class="built_in">stack</span>))&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            <span class="type">char</span> topElem;</span><br><span class="line">            Pop(<span class="built_in">stack</span>,topElem);</span><br><span class="line">            <span class="keyword">if</span>(topElem == <span class="string">&#x27;[&#x27;</span> &amp;&amp; s[i]==<span class="string">&#x27;]&#x27;</span> || topElem == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; s[i]==<span class="string">&#x27;&#125;&#x27;</span> || topElem == <span class="string">&#x27;(&#x27;</span> &amp;&amp; s[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(StackEmpty(<span class="built_in">stack</span>))&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用链栈">使用链栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> ele;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Lnode,*LiStack;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init_listack</span><span class="params">(LiStack &amp;L)</span>&#123;</span><br><span class="line">    L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(LiStack &amp;L,<span class="type">char</span> ele)</span>&#123; <span class="comment">//没有头结点</span></span><br><span class="line">    Lnode* s;</span><br><span class="line">    s = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    s -&gt; ele= ele;</span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        L = s;</span><br><span class="line">        s -&gt; next =<span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Lnode *p = L;<span class="comment">//p是指向第一个节点，L是指向链表，虽然内容相同但是代表意义不同</span></span><br><span class="line">        L = s;    <span class="comment">//s接替p成为第一个节点</span></span><br><span class="line">        s-&gt;next = p;  <span class="comment">//连接s和p</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(LiStack &amp;L,<span class="type">char</span> &amp;ele)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* p = L;</span><br><span class="line">    ele = p-&gt;ele;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        L = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">StackEmpty</span><span class="params">(LiStack &amp;L)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">input_bracket_match</span><span class="params">()</span>&#123;</span><br><span class="line">    LiStack L;</span><br><span class="line">    init_listack(L);</span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">while</span>(a!=<span class="string">&#x27;b&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&#x27;[&#x27;</span>||a==<span class="string">&#x27;&#123;&#x27;</span>||a==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            Push(L,a);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(StackEmpty(L))&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            <span class="type">char</span> topElem;</span><br><span class="line">            Pop(L,topElem);</span><br><span class="line">            <span class="keyword">if</span>(topElem == <span class="string">&#x27;[&#x27;</span> &amp;&amp; a==<span class="string">&#x27;]&#x27;</span> || topElem == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; a==<span class="string">&#x27;&#125;&#x27;</span> || topElem == <span class="string">&#x27;(&#x27;</span> &amp;&amp; a==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(StackEmpty(L))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记（三）— 线性表</title>
      <link href="/2023/07/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/07/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="逻辑结构与存储结构">逻辑结构与存储结构</h1><h2 id="逻辑结构">1.逻辑结构</h2><ul><li>集合结构 无关系</li><li>线性结构 一对一</li><li>树形结构 一对多</li><li>图形结构 多对多（网络）</li></ul><h2 id="存储结构">2. 存储结构</h2><ul><li><p>顺序存储</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Array[<span class="number">6</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Array[<span class="number">3</span>]);  <span class="comment">//随机访问第四个元素：随机指访问各个元素时间复杂度相同</span></span><br></pre></td></tr></table></figure><ul><li>优点<ol type="1"><li>可以实现随机存取</li><li>每个元素占用最少的空间</li></ol></li><li>缺点<ol type="1"><li>只能使用整块的存储单元，会产生较多的碎片。</li></ol></li></ul></li><li><p>链式存储（内存中跳跃的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Lnode, *LinkList;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">A -&gt; next = B;B-&gt;next = C;</span><br></pre></td></tr></table></figure><ul><li>优点<ol type="1"><li>充分利用所有存储单元，不会出现碎片（删除中间元素时直接改变前一个元素的next指针就可以）</li></ol></li><li>缺点<ol type="1"><li>需要额外的存储空间来存放下一节点的指针</li><li>只能实现顺序存取</li></ol></li></ul></li></ul><h1 id="时间复杂度与空间复杂度">时间复杂度与空间复杂度</h1><h3 id="算法的定义">算法的定义</h3><p>对特定问题求解步骤的描述</p><p>特性：有穷、确定、可行、输入、输出</p><h2 id="时间复杂度">1.时间复杂度</h2><p>时间复杂度指算法中所有语句的频度（执行次数）之和</p><p>记为：T(n) = O(f(n)) n是问题的规模；f(n)是问题规模n的某个函数</p><ul><li>O(1)表示算法复杂度不会随n的增长而增长</li></ul><p><img src="/2023/07/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/IMG_0430(20230718-213101).PNG" alt="IMG_0430(20230718-213101)" style="zoom: 33%;"></p><ul><li>时间复杂度计算忽略高阶项系数和低阶项</li></ul><p><img src="/2023/07/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/IMG_0431(20230718-213342).PNG" alt="IMG_0431(20230718-213342)" style="zoom: 33%;"></p><ul><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>  (j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">sum = sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//对于外层循环，相当于内部时间复杂度为O(m)的语句执行n次</span></span><br><span class="line"><span class="comment">// 时间复杂度T(n)=O(m*n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    sum = sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>  (j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">sum = sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两个循环串行执行</span></span><br><span class="line"><span class="comment">// T(n) = max(O(m)+O(n))</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="空间复杂度">2.空间复杂度</h2><p>指算法运行过程中所使用的辅助空间的大小</p><ul><li>空间复杂度O(1)：指算法所需的辅助空间为常量，不随n增长而增长，即算法原地工作</li><li>额外的空间 (随着n的增长而增长的空间)</li><li>若输入数据所占空间只取决于问题本身，和算法无关，这样只需分析该算法在实现时所需的辅助单元即可</li></ul><h1 id="线性表">线性表</h1><p>定义：由n个相同类型元素的元素组成的有序集合</p><p>特点：</p><ul><li>表中元素个数有限</li><li>表中各元素数据类型相同（每个元素占用相同大小的空间）</li><li>表中元素具有逻辑上的顺序性</li></ul><p>线性表的定义是逻辑结构，还需要通过存储结构来实现</p><h2 id="线性表的顺序表示顺序表">线性表的顺序表示—顺序表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>  <span class="comment">//如果起别名这里可以省略名字</span></span><br><span class="line">    Elemtype data[MaxSize];   <span class="comment">//顺序表的元素</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;SqList;    <span class="comment">//类型定义</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>可以<mark class="hl-label blue">随机存取</mark> 表中任意一个元素</li><li>存储密度高，每个节点只存储数据元素（如果是链表还需要存指针）</li></ul><p>缺点：</p><ul><li><p>插入和删除不方便</p></li><li><p>存储空间容量固定，拓展容量不方便（需要将数据复制到新的区域）</p></li><li><p>占用一大段连续的存储空间，造成很多碎片</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入操作 (满足1&lt;=i&lt;=len+1)</span></span><br><span class="line"><span class="comment">//判断插入i后是否溢出 (len+1&gt;maxsize)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = len;j &gt;= i;j--) &#123;    <span class="comment">//将最后一个元素到第i个元素依次后移一位</span></span><br><span class="line">    L.data[j] = L.data[j<span class="number">-1</span>];   <span class="comment">//data[j]在线性表中指第i+1个元素</span></span><br><span class="line">&#125;</span><br><span class="line">L.data[i<span class="number">-1</span>] = x;     <span class="comment">//修改元素</span></span><br><span class="line">L.len++;         <span class="comment">//长度+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作 (满足1&lt;=i&lt;=len)</span></span><br><span class="line">e = L.data[i<span class="number">-1</span>]    <span class="comment">//保存被删除的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = len;j&lt;L.len;j++)&#123;</span><br><span class="line">    L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">&#125;</span><br><span class="line">L.len--</span><br></pre></td></tr></table></figure><p>动态分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elemtype *data;    <span class="comment">//使用时需要用malloc申请指针，否则无效</span></span><br><span class="line">    <span class="type">int</span> MaxSize,len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始动态内存分配</span></span><br><span class="line">L.data = (*Elemtype)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Elemtype)*InitSize);</span><br></pre></td></tr></table></figure><p>插入算法实战：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  <span class="comment">//让顺序表在存储其它类型元素时能迅速完成修改。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,ElemType ele)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.len==MaxSize)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=<span class="number">1</span>&amp;&amp;i&lt;=L.len+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=L.len;j&gt;=i;j--)&#123;</span><br><span class="line">            L.data[j] = L.data[j<span class="number">-1</span>];   <span class="comment">//前一个数赋值给后一个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        L.data[i<span class="number">-1</span>] = ele;   <span class="comment">//第i个数索引是i-1</span></span><br><span class="line">        L.len++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">del_ele</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span>&#123;  <span class="comment">//L和e都需要引用</span></span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; i&lt;L.len)&#123;</span><br><span class="line">        e = L.data[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;L.len;j++)&#123;</span><br><span class="line">            L.data[j<span class="number">-1</span>] = L.data[j];    <span class="comment">//第i后元素后的元素都前移</span></span><br><span class="line">        &#125;</span><br><span class="line">        L.len--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">searchid</span><span class="params">(SqList L, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e == L.data[i])&#123;    <span class="comment">//如果e是结构体，那么不能直接用==判断相等，需要遍历每一个成员</span></span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;  <span class="comment">//因为i是数组的下标，加一是顺序表的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(SqList L)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>,L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="type">bool</span> ret;  <span class="comment">//用来装函数的返回值</span></span><br><span class="line">    L.data[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    L.data[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    L.data[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    L.len = <span class="number">3</span>; <span class="comment">//一定要定义数组长度</span></span><br><span class="line">    ret = ListInsert(L, <span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        print(L);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果写成<code>data[3] = [1,4,5]；</code></p><p>就会报错 cannot convert<code>&lt;brace-enclosed initializer list&gt;</code>to 'int' inassignment</p><p>// 因为在ListInsert()里，已经对datas这个数组初始化了， //那么datas这个数组名作为一个指针，已经指向了内存中的一个位置，so不能再次对它初始化// 所以只能用循环语句给它赋值，让他指向新的内存单元。</p><h2 id="线性表的链式存储链表">线性表的链式存储—链表</h2><p>逻辑上相邻，物理上不一定相邻</p><h2 id="单链表">单链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> &#123;</span><span class="comment">//单链表节点类型，由于结构体内定义相同类型指针，因此名称不能省略</span></span><br><span class="line">    ElemType data;     <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;Lnode, *LinkList;<span class="comment">//Lnode* 强调这是一个结点，Linklist强调是一个单链表</span></span><br><span class="line"><span class="comment">//L = (LinkList)malloc(sizeof(Lnode));</span></span><br><span class="line"><span class="comment">//A -&gt; next = B;B-&gt;next = C;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始一个空的单链表，带头结点</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123; <span class="comment">//这里L是一个指向头结点的指针，也不是一个结点，也没有data值</span></span><br><span class="line">    L = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));  <span class="comment">//注意是给L指向的区域分配空间，L-&gt;next是L指向的区域的指针指向的区域（套娃）</span></span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//内存不足，分配失败</span></span><br><span class="line">    &#125; </span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;   <span class="comment">//头结点之后没有结点，这也是判断单链表是否为空的条件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    LinkList L;   <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line">    InitList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line">q = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">q-&gt;next = x;<span class="comment">//表头插入</span></span><br><span class="line"></span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;<span class="comment">//中间插入q元素</span></span><br><span class="line"></span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表头删除元素</span></span><br><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//链式表的断链</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按序号查找</span></span><br><span class="line">LNode *p = L-&gt;next;</span><br><span class="line"><span class="type">int</span> j =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(p&amp;&amp;j&lt;i) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line">LNode *p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data != e)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br></pre></td></tr></table></figure><ul><li>头指针：链表中第一个结点的存储位置，用来标识单链表</li><li>头结点：在单链表第一个结点之前附加的一个结点，为了操作方便（一般数据为空，或存放链表长度）</li></ul><p>优点：</p><ul><li>不需要移动元素（只修改指针就可以）</li><li>不需要大量的存储空间</li></ul><p>缺点：</p><ul><li>指针域浪费空间</li><li>查找时需要从表头开始查找，不能随机存取（顺序表可以直接按地址查找）</li></ul><h3 id="自己写的链表报错总结">自己写的链表报错总结</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">print_link</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="comment">//   这里本来想写一个检测是否初始化的函数，但是目前我还没找到方法，没初始化就是用不了</span></span><br><span class="line"><span class="comment">//    if(L-&gt;next != NULL)&#123;      //如果L没有初始化，程序报错，不能进行任何操作</span></span><br><span class="line"><span class="comment">//        printf(&quot;linklist is not initialized&quot;);</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;linklist is empty&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(L-&gt;next)&#123;     </span><br><span class="line">            <span class="comment">//第一个L-data就是头结点里的数据，没有意义，不打印</span></span><br><span class="line">  </span><br><span class="line">            L = L-&gt;next;    <span class="comment">//当L-&gt;next 不为null时，我们直接跳到L-&gt;next所在位置，获取他的data；</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L -&gt;data); </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在第i个位置插入元素e</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">List_insert</span><span class="params">(LinkList &amp;L,ElemType e,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* p = L;   <span class="comment">//如果不带头结点，i=1的情况需要专门处理</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;   <span class="comment">//j代表当前p 指向第几个元素</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;   <span class="comment">//p指向第i-1个元素时退出</span></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;   <span class="comment">//这里开始可以封装为一个函数InsertNextNode(LNode *p,ElemType e),在指定节点后插入元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* s = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)&#123;  <span class="comment">//内存申请失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Listdel</span><span class="params">(LinkList &amp;L,ElemType &amp;e,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* p = L;   <span class="comment">//如果不带头结点，i=1的情况需要专门处理</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;   <span class="comment">//j代表当前p 指向第几个元素</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;   <span class="comment">//p指向第i-1个元素时退出</span></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>||p-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* s = p-&gt;next;</span><br><span class="line">    e = s-&gt;data;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = s-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(s);   <span class="comment">//一定要免费一定要免费一定要免费</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    LinkList L;   <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line">    InitList(L);</span><br><span class="line">    Lnode* l = L;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">6</span>,<span class="number">43</span>,<span class="number">34</span>,<span class="number">77</span>,<span class="number">54</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="comment">//这里如果前面定义 Lnode*l = L-&gt;next;   </span></span><br><span class="line">      <span class="comment">//这里改成 给l申请内存 就会报错,我以为道理是一样的</span></span><br><span class="line">      <span class="comment">//但是其实L-&gt;next他是没有申请内存的，根本就用不了，所以这里一定是复制一个L，L-&gt;next 是复制不了的</span></span><br><span class="line">        l-&gt;next = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));   </span><br><span class="line">       </span><br><span class="line">        l =l -&gt;next;    <span class="comment">//这两句不能颠倒，否则l-&gt;data就是往头结点中写数据，l-&gt;next-&gt;data才是第一个节点</span></span><br><span class="line">        l -&gt;data = a[i];</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&gt;=<span class="number">5</span>)&#123;</span><br><span class="line">            l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    改进写法；（相当于尾插法）</span><br><span class="line">    Lnode* l = L;  <span class="comment">//l代表最后一个节点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        Lnode *p = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));  <span class="comment">//创建新节点</span></span><br><span class="line">        p -&gt;data = a[i];</span><br><span class="line">        l -&gt;next = p;</span><br><span class="line">        l = p;</span><br><span class="line">    &#125;</span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    print_link(L);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在指定节点前插入元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertpriorNode</span><span class="params">(Lnode* p, ElemEype e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* s = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;      </span><br><span class="line">    s-&gt;data = p-&gt;data;  <span class="comment">//把p的数据和s互换，把后插转化为前插</span></span><br><span class="line">    p-&gt;data = e;     <span class="comment">//偷天换日</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除制定节点p</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNode</span><span class="params">(LNode *p)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    LNode* s = p-&gt;next;   <span class="comment">//将p的后继节点s数据复制到p中，断掉节点s</span></span><br><span class="line">    p-&gt;data = s-&gt;data;</span><br><span class="line">    p-&gt;next = s-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//如果p是最后一个节点会出问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按位查找">按位查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回第i个元素</span></span><br><span class="line">LNode* <span class="title function_">GetElem</span><span class="params">(Linklist L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    Lnode* p = L;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;i)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;  <span class="comment">//如果i超值，那么返回的值也为NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line">LNode* <span class="title function_">LocateElem</span><span class="params">(LinkList L,ElemType e)</span>&#123;</span><br><span class="line">    LNode*p = L-&gt;next;</span><br><span class="line">    <span class="comment">//从第一个节点开始寻找数据域为e的元素</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p!=e)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p; <span class="comment">//找到后返回改节点类型，否则返回NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求链表长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line">    LNode* p = L;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以替换之前的插入、删除函数的查找部分</p><ul><li>避免重复代码，简洁、易维护</li></ul><h3 id="单链表的建立">单链表的建立</h3><ul><li>尾插法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_TaiInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">Lnode* x = L;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ele;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ele);</span><br><span class="line">    <span class="keyword">while</span>(ele !=<span class="number">494</span>)&#123;</span><br><span class="line">        x-&gt;next = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">        x-&gt;next -&gt;data = ele;</span><br><span class="line">        x = x-&gt;next;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ele);</span><br><span class="line">    &#125;</span><br><span class="line">    x-&gt;next =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>头插法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">Lnode* x = L;</span><br><span class="line">    L-&gt;next =<span class="literal">NULL</span>;  <span class="comment">//只要是初始化链表时，尽量都先把头指针指向NULL</span></span><br><span class="line">Lnode* n;</span><br><span class="line">    <span class="type">int</span> ele;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ele);</span><br><span class="line">    <span class="keyword">while</span>(ele !=<span class="number">494</span>)&#123;</span><br><span class="line">        n = (Lnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">        n-&gt;next = L-&gt;next;  <span class="comment">//在指定节点（头结点）后插入新节点</span></span><br><span class="line">        n-&gt;data = ele;</span><br><span class="line">        L-&gt;next = n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;<span class="comment">//重要应用:链表的逆置</span></span><br><span class="line"><span class="comment">//建立新链表或者循环原地逆置</span></span><br></pre></td></tr></table></figure><ul><li>原地逆置的练习</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_invert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    Lnode* p = L-&gt;next; <span class="comment">//第一个元素</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* s = p-&gt;next; <span class="comment">//第二个元素</span></span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next =<span class="literal">NULL</span>;  <span class="comment">//由于第一个元素逆置后会成为最后一个元素，所以先NULL为敬</span></span><br><span class="line">    <span class="keyword">while</span> (s!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        Lnode* h = s;</span><br><span class="line">        h = s-&gt;next;</span><br><span class="line">        s-&gt;next = L-&gt;next;   <span class="comment">//转移到头部</span></span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">        s = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表">双链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span>  <span class="comment">//一个节点定义</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span>&#123;  <span class="comment">//初始化双链表</span></span><br><span class="line">    L = (DLinkList)<span class="built_in">malloc</span>(typeof(DNode));</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//内存申请失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">empty</span><span class="params">(DLinkList L)</span>&#123;  <span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Insert</span><span class="params">(DNode *p, DNode *s)</span>&#123; <span class="comment">//制定节点后插s</span></span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next-&gt;prior = s;  <span class="comment">//如果是循环链表就没问题，如果不循环，需要判断p-&gt;next是否为NULL</span></span><br><span class="line">    s-&gt;prior = p;</span><br><span class="line">    p-&gt;next = s;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete</span><span class="params">(*p)</span>&#123;  <span class="comment">//删除p节点的后继节点</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q-&gt;next-&gt;prior = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表">循环链表</h3><p>循环单链表</p><ul><li>初始化：最后节点的next指针指向自己（等于L）</li><li>从一个节点出发可以找到其它任意节点</li><li>如果经常对表头或表尾进行操作时，可以将L指向表尾（插入表尾元素时需要修改L）</li><li>判空 L-&gt;next ==L 判断是否为尾结点p -&gt;next ==L</li></ul><p>循环双链表</p><ul><li>插入或删除后节点时不用考虑next为空指针的情况</li></ul><div class="note primary modern"><p><strong>注意：</strong></p><ol type="1"><li><p>如何判空</p></li><li><p>如何判断节点是否是表尾、表头节点</p></li><li><p>如何在表头、表中、表尾插入/删除一个节点</p></li></ol></div><h3 id="静态链表">静态链表</h3><p>用数组方式实现的链表</p><ul><li>单链表：各个节点在内存中随机分配</li><li>静态链表：分配一整片的内存空间</li></ul><p>特点：</p><ul><li><p>0号节点充当头节点</p></li><li><p>游标（充当指针）：指向下一个节点的数组下标</p></li><li><p>-1表示达到表尾</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> next;</span><br><span class="line">&#125; SLinkList[MaxSize]; <span class="comment">//声明一个大小为maxsize的结构体数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">SLinkList</span>[<span class="title">MaxSize</span>];</span></span><br></pre></td></tr></table></figure><ul><li>初始化：a[0] = -1、标记空闲节点（设置为-2）</li><li>查找：从头结点开始挨个遍历</li><li>插入位序为i的节点：<ul><li>找到一个空的节点，存入数据元素</li><li>从头结点开始找到 i-1的元素</li><li>修改新节点next 》 修改i-1的节点next 指向新节点</li></ul></li></ul><p>容量固定不可变，应用场景较少，主要用于</p><ol type="1"><li><p>不支持指针的低级语</p></li><li><p>数据元素数量固定不变的场景（操作系统的文件分配表FAT）</p></li></ol><h2 id="总结">总结</h2><p>基本操作：</p><ol type="1"><li><p>InitList(&amp;L)：初始化，构造一个空的线性表</p></li><li><p>Length(L)：求表长</p></li><li><p>LocateElem(L,e)：按值查找操作</p></li><li><p>GetElem(L,i)：按位查找操作</p></li><li><p>ListInsert(&amp;L,i,e)：在指定位置i插入元素e</p></li><li><p>ListDelete(&amp;L,i,&amp;e)：删除操作，e返回被删除函数值</p></li><li><p>PrintList(L)：输出操作</p></li><li><p>Empty(L)：判空操作</p></li><li><p>Destroy(L)：销毁操作。释放内存空间</p></li></ol><details class="toggle"><summary class="toggle-button" style>查看实现</summary><div class="toggle-content"></div></details><p>销毁操作：</p><ul><li>由数组申请的空间，系统会自动回收，只需设置length=0即可</li><li>由malloc申请的空间，需要对每一个节点free</li></ul><p>使用场景：</p><ul><li>表长难以预估、经常增删元素 ——使用链表</li><li>表长固定，经常查找元素 ——使用顺序表</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记（二）— 指针、函数、结构体</title>
      <link href="/2023/07/18/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2023/07/18/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="指针">指针</h1><h2 id="指针的定义">1.指针的定义</h2><ul><li>直接访问：按变量地址存取变量值的方式。</li><li>间接访问：将变量i的地址存储到另一个变量（指针变量）。</li></ul><p>变量的地址指的就是变量的起始地址</p><ul><li><p>定义：<code>int *i_pointer</code></p></li><li><p>指针和指针变量：</p><ul><li>指针等价于地址</li><li>指针变量：存放指针的变量</li></ul></li><li><p>所占空间：如果程序为64位，占8字节；32位为4个字节。</p></li><li><p>取地址运算符&amp;，取值操作符*（得到一个变量对应的地址数据）（单目运算符，右到左）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> *i_pointer = &amp;i; <span class="comment">//指针数据类型和原变量类型相同</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *i_pointer); <span class="comment">//间接访问</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="指针的使用场景传递和偏移">2.指针的使用场景：传递和偏移</h2><h3 id="指针的传递">指针的传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    j = <span class="number">5</span>;<span class="comment">//使用指针间接访问  *j=5;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">    change(i);</span><br><span class="line">    print(<span class="string">&quot;%d\n&quot;</span>,i); <span class="comment">//i的值不会改变，c语言的函数调用是实参赋值给形参</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用指针</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change2</span><span class="params">(<span class="type">int</span> *j)</span>&#123;</span><br><span class="line">    *j = <span class="number">5</span>; <span class="comment">//*j等价于i，只是间接访问</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i= <span class="number">10</span>;</span><br><span class="line">    change2(&amp;i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进程地址空间：</p><p><img src="/2023/07/18/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/7522EF52D55962833EEBC5447AC319D0.png" alt="7522EF52D55962833EEBC5447AC319D0" style="zoom: 33%;"></p><h3 id="指针的偏移">指针的偏移</h3><ul><li><p>偏移：指针的加减</p></li><li><p>指针p+1，增加大小依赖于基类型的字节长度</p><p>如int *p,p的加减偏移4个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">char</span> *d)</span>  <span class="comment">//不存在传递数组的说法，只能传递指针的值</span></span><br><span class="line">&#123;</span><br><span class="line">    *d = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>; <span class="comment">//两种方式等价</span></span><br><span class="line">    *d + <span class="number">2</span>= <span class="string">&#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="指针与malloc动态内存申请">3. 指针与malloc动态内存申请</h2><h3 id="指针与动态内存申请">指针与动态内存申请</h3><ul><li><p>栈空间：在编译时大小确定，数组中定义的整型、浮点型、字符型变量都在栈空间中，因此长度确定</p><p>堆空间：空间大小不确定</p></li><li><p>如何申请堆空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">//malloc使用的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> size; <span class="comment">//size代表申请的空间大小</span></span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);<span class="comment">//输入申请空间大小</span></span><br><span class="line">    p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size); <span class="comment">//malloc返回void*无类型指针，需要强制类型转换，</span></span><br><span class="line">        <span class="comment">//void*指针不能偏移，否则进行指针加减会报错</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p, <span class="string">&quot;malloc success&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(p);</span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//释放申请的空间，栈空间由操作系统管理，不需要释放</span></span><br><span class="line">    <span class="comment">//p必须是最初malloc返回的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2023/07/18/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/D467F3041D7BDB98905BB286057BEFBD.png" alt="D467F3041D7BDB98905BB286057BEFBD" style="zoom:33%;"></p><ul><li><p>为什么分栈空间和堆空间？</p><ul><li><p>栈（heap）：计算机系统提供的数据结构；分配专门的寄存器存放栈的地址，有专门的压栈、出栈操作指令</p></li><li><p>堆（stack）：函数库提供的数据结构；由算法实现。</p></li><li><p>堆的效率比栈低得多</p></li><li><p>栈空间中的数据在函数执行结束后会被释放，堆空间在整个进程中一直有效，不因函数结束而消亡。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">print_stack</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">100</span>] = <span class="string">&quot;I am print_stack func&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(c);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>* <span class="title function_">print_malloc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(p, <span class="string">&quot;I am print_malloc func&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">    p = print_stack();</span><br><span class="line">    <span class="built_in">puts</span>(p);  <span class="comment">//此时输出值错误或为空值</span></span><br><span class="line">    p = print_malloc();</span><br><span class="line">    <span class="built_in">puts</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="函数">函数</h1><h2 id="函数声明与定义">1. 函数声明与定义</h2><ul><li><p>使用多个文件：右键项目名称—新建C/C++源文件—添加到目标（和<code>main.c</code>编译到一个可执行文件中）—创建<code>func.c</code></p><p>新建C/C++头文件<code>func.h</code>（执行时直接拷贝到各个.c文件中）</p></li></ul><p>​ <code>func.h</code>中写函数的声明，<code>func.c</code>写函数实现</p><ul><li><strong>Ctrl+鼠标左键</strong> 点击对应函数，可以查看对应源码、</li><li>由若干程序源文件组成一个c程序，这样处理便于<strong>分别编写、分别编译，进而提高调试效率</strong></li><li>函数不能嵌套定义，但是可以嵌套调用</li><li>函数可以互相调用，但不能调用main</li><li>函数的声明需要：函数的名字、函数类型及形参的类型、个数和顺序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_message</span><span class="params">()</span>;<span class="comment">//如果函数定义在main后面，需要先进行声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">print2</span><span class="params">(<span class="type">int</span> i,<span class="type">char</span> c)</span>;<span class="comment">//如果不声明函数默认返回整型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    print_message();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_message</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;how are you &quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的递归调用">2. 函数的递归调用</h2><ul><li><p>我们把函数自己调用自己叫做递归，递归函数一定要有结束条件，否则会产生死循环。</p></li><li><p>递归的核心是找公式</p><p>f(n) = n*f(n-1) 找出f(n)和f(n-1)的关系</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;<span class="comment">//一定要有结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n*f(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>例题：假如有n个台阶，一次智能上1个台阶或2个台阶，请问走到第n个台阶有几种走法？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step(n) = step(n-1) + step(n-2)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">step</span><span class="params">(<span class="type">int</span> n)</span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==n||<span class="number">2</span>==n)&#123; <span class="comment">//当台阶是1个或者2个时，递归结束</span></span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> step(n<span class="number">-1</span>) + step(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;   </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,n);   <span class="comment">//输入数字太大，递归次数过多会导致栈溢出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,step(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部变量与全局变量">3.局部变量与全局变量</h2><p>全局变量：</p><ul><li>全程都会占用内存空间，不建议使用</li><li>使用过多降低程序清晰性。</li><li>将函数移动到另一个文件时容易产生问题</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>; <span class="comment">//i是一个全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a)</span>&#123;  <span class="comment">//形参可以看成局部变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>,i);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">100</span>;k++)&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">5</span>;    <span class="comment">//局部变量只在离自己最近的大括号内有效</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main i = %d\n&quot;</span>,i);</span><br><span class="line">    i = <span class="number">5</span>; <span class="comment">//此时正常修改全局变量</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">6</span>;<span class="comment">//局部变量和全局变量重名，采取就近原则，即实际获取或修改都是局部变量的值</span></span><br><span class="line">    print(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于形参和实参">关于形参和实参：</h3><ul><li>形参在没有调用时不会占用内存空间</li><li>实参可以使变量、常量、表达式，但要有确定的值</li><li>实参与形参个数要相等，类型相同</li><li>函数调用结束后形参单元被释放</li></ul><h1 id="结构体">3.结构体</h1><h2 id="结构体的定义初始化结构体数组">1.结构体的定义、初始化、结构体数组</h2><blockquote><p>C语言提供结构体管理不同类型的数据组合</p></blockquote><h3 id="结构体声明">结构体声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> //结构体名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">    <span class="type">char</span> addr[<span class="number">30</span>];<span class="comment">//成员表列</span></span><br><span class="line">&#125;;<span class="comment">//最后要加分号</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span> =</span> &#123;<span class="number">10001</span>,<span class="string">&quot;lele&quot;</span>,<span class="string">&#x27;M&#x27;</span>, <span class="number">20</span>, <span class="number">85.4</span>,<span class="string">&quot;Shenzhen&quot;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">sarr</span>[3];</span><span class="comment">//结构体数组,通过for循环访问</span></span><br><span class="line">    <span class="comment">//结构体输出必须单独去访问内部的每个成员</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %d %f %s&quot;</span>,s.num,s.name,s.sex,s.age,s.score,s.addr);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d%s %c%d%f%s&quot;</span>,&amp;s.num,&amp;s.name,&amp;s.sex,&amp;s.age,&amp;s.score,&amp;s.addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %d %f %s&quot;</span>,s.num,s.name,s.sex,s.age,s.score,s.addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个成员单独复制 <code>s.num = 1004</code></p><h3 id="结构体对齐">结构体对齐</h3><ul><li><p><strong>结构体大小必须是其最大成员的整数倍</strong> -&gt;为了cpu能高效地取内存上的数据</p></li><li><p>结构体内的成员也要按最大成员的字节数对齐</p></li><li><p>大小和结构体位置有关系，例如如果short和char挨着，如果最大4字节，就会合并占用4个字节，减少使用空间</p></li></ul><p>例题：问结构体类型大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student_type1</span> &#123;</span></span><br><span class="line"><span class="type">double</span> score;</span><br><span class="line"><span class="type">short</span> age;  <span class="comment">//整型，占2个字节，其它和int相同</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student_type2</span> &#123;</span></span><br><span class="line"><span class="type">double</span> score;</span><br><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student_type3</span> &#123;</span></span><br><span class="line"><span class="type">int</span> height;</span><br><span class="line">    <span class="type">char</span> sex;  <span class="comment">//如果两个小之和小于最大存储8，那么他们结合在一起</span></span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student_type1</span> <span class="title">s1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student_type2</span> <span class="title">s2</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student_type3</span> <span class="title">s3</span>;</span></span><br><span class="line">    print(<span class="string">&quot;size = %d\n&quot;</span>,<span class="keyword">sizeof</span>(s1)); <span class="comment">// 16 个字节</span></span><br><span class="line">    print(<span class="string">&quot;size = %d\n&quot;</span>,<span class="keyword">sizeof</span>(s2)); <span class="comment">// 16 个字节</span></span><br><span class="line">    print(<span class="string">&quot;size = %d\n&quot;</span>,<span class="keyword">sizeof</span>(s3)); <span class="comment">// 8 个字节  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体指针与typedef的使用">2. 结构体指针与typedef的使用</h2><h3 id="结构体指针">结构体指针</h3><p>结构体变量的地址就是该变量所占据的内存段的起始地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//结构体指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span> =</span> &#123;<span class="number">1001</span>, <span class="string">&quot;hutao&quot;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">sarr</span>[3] =</span> &#123;<span class="number">1002</span>, <span class="string">&quot;zhongli&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1003</span>,<span class="string">&quot;wanye&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1004</span>,<span class="string">&quot;keqing&quot;</span>,<span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span> <span class="comment">//定义一个指针变量</span></span><br><span class="line">    p = &amp;s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>,(*p).num,(*p).name,(*p).sex); <span class="comment">//方式一获取成员，.的优先级大于*，因此需要加括号</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>,p-&gt;num,p-&gt;name,p-&gt;sex); <span class="comment">//方式二快速访问结构体指针的成员</span></span><br><span class="line">    p = sarr; <span class="comment">//等价于 p = &amp;sarr[0];都是指向数组第一个元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>,(*p).num,(*p).name,(*p).sex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s %c\n&quot;</span>,p-&gt;num,p-&gt;name,p-&gt;sex);</span><br><span class="line">    p = p+<span class="number">1</span>; <span class="comment">//指向下一个结构体变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typedef的使用">typedef的使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typedef的使用，起别名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125;stu,*pstu;     <span class="comment">//stu 等价于 struct student, pstu 等价于 struct student*</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    stu s=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    stu *p=&amp;s;</span><br><span class="line">    pstu p1=&amp;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INTEGER; <span class="comment">//便于在特定的地方改变数据类型 如：改为short类型</span></span><br></pre></td></tr></table></figure><h1 id="拓展c引用">拓展：C++引用</h1><p>c++文件后缀，main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifynum</span><span class="params">(<span class="type">int</span> &amp;b)</span> <span class="comment">//这里的&amp;不是取地址，而是引用，引用后可以直接修改函数外的变量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b = b+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">modify_num</span>(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after modify_num a=%d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用了引用后，在子函数内和函数外操作手法一致，提高编程效率</li><li>想在子函数中改变主函数变量的值就用引用，不改变就使用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_pointer</span><span class="params">(<span class="type">int</span> * &amp;p,<span class="type">int</span> *q)</span>   <span class="comment">//如果改为c语言，则需要用到二级指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子函数内修改主函数的一级指针变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *q = &amp;i;</span><br><span class="line">    <span class="built_in">modify_pointer</span>(p,q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>,*p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：在主函数定义字符指针char*p,然后在子函数内malloc申请空间（大小为100个字节）,通过fgets读取字符串，然后在主函数中进行输出；要求子函数使用C++的引用，注意在C++中从标准输入读取字符串，需要使用fgets(p,100,stdin)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">//malloc使用的头文件</span></span></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">malloc_apply</span><span class="params">(<span class="type">char</span> *&amp;p)</span></span>&#123;</span><br><span class="line">    p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">fgets</span>(p,<span class="number">100</span>,stdin); <span class="comment">//比gets更安全，不会出现stdin超出100个字符的情况</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,<span class="built_in">malloc_apply</span>(p));</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记(一)</title>
      <link href="/2023/07/17/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2023/07/17/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="c语言">C语言</h1><h2 id="由来">由来</h2><p>ALGOL（A语言）→ BCPL（B语言）</p><p>世界上第一个c语言编辑器使用B语言写的</p><p>C语言之父：ken thompson Dennis M.Ritchie</p><h2 id="clion开发-环境">clion开发 环境</h2><p>注意：1.项目存储路径必须全英文</p><p>c++项目 c++ exectuable</p><p>c 项目 c exectuable</p><ul><li><p>环境激活试用</p><p>将激活文件夹拖入窗体中</p><p><a href="https://sales.jetbrains.com/hc/zh-cn/articles/207154369-%E5%AD%A6%E7%94%9F%E5%92%8C%E6%95%99%E5%B8%88%E6%8E%88%E6%9D%83%E7%94%B3%E8%AF%B7%E6%96%B9%E5%BC%8F">学生和教师授权申请方式– 许可和购买常见问题解答 (jetbrains.com)</a></p><p>激活教育版</p><ul><li><p>远程协助软件</p><p>国外 teamview</p><p>国内 向日葵</p></li></ul></li><li><p>编译与调试</p><ul><li><p>代码文件</p><p>不同语言以后缀名来区分如.c, .java, .py，但本质上都是文本文件</p></li><li><p>编译</p><p>将人工编写的代码转换机器可以执行的程序（纯二进制码）</p></li><li><p>调试</p><p>左侧红点：打断点</p><p>点击虫子（调试按钮）</p><p>出现蓝色长条，开始调试，从当前这行开始运行（当前行未运行）</p><p>点击折弯箭头运行一步</p><ul><li>步过：当前函数一步一步走 F8</li><li>步入：进入到某个子函数F7（到达某个函数要进入自己的子函数时使用）</li></ul></li></ul></li><li><p>代码格式</p><p>头文件</p><p>#include studio.h</p><p><a href="https://blog.csdn.net/weixin_43491077/article/details/109012061">(16条消息)C语言中头文件中#include“stdlib.h“的作用_#include&lt;stdlib.h&gt;_阿槐123456的博客-CSDN博客</a></p><p>int(函数返回值类型)</p><p>main()主函数名，每个c语言程序只能有一个main，程序从main开始执行</p></li></ul><h3 id="数据类型-常量-变量">数据类型-常量-变量</h3><ul><li><p>数据类型</p><ul><li>基本类型<ul><li>整形 int</li><li>浮点型 float</li><li>字符型 char</li></ul></li><li>构造类型<ul><li>数组（相同数据类型）</li><li>结构体（不同数据类型）</li></ul></li><li>指针类型 *</li><li>空类型 void</li></ul></li><li><p>常量</p><p>整形、实型（浮点型）、字符型‘a’ <em>(单引号)</em>、字符串型“abc”<em>(双引号)</em></p></li><li><p>变量（整型-浮点-字符）</p><p><strong>在程序执行过程中可以改变</strong></p><ul><li><p>命名：字母、下划线、数字（不能数字开头）</p><p>不能与关键字重名</p><figure><img src="/2023/07/17/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/Untitled.png" alt="c语言中的关键字"><figcaption aria-hidden="true">c语言中的关键字</figcaption></figure></li><li><p>先定义，后使用</p></li></ul></li><li><p>符号常量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;studio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3+2   <span class="comment">//定义符号变量</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = PI*<span class="number">2</span>;  <span class="comment">//直接替换结果，不能赋值</span></span><br><span class="line">    print(<span class="string">&quot;%d\n&quot;</span>,i); <span class="comment">//结果为7，PI*2 = 3 + 2*2 = 7</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>整型变量</p><ul><li>每个整数四个字节（4Byte）</li><li>查看变量大小： sizeof(i)</li><li>输出%d</li></ul></li><li><p>浮点型常量</p><p><a href="https://www.zhihu.com/question/55152080">(24 封私信 / 80条消息) c语言：为什么把整数以%f格式输出是0.000？ - 知乎(zhihu.com)</a></p><p>float f = 3e-3 0.003（四个字节）</p><p>小数形式</p><p>指数形式 3e-3</p><figure><img src="/2023/07/17/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/Untitled%201.png" alt="Untitled"><figcaption aria-hidden="true">Untitled</figcaption></figure></li><li><p>字符</p><ul><li><a href="https://www.asciim.cn/">ASCII码 -基本ASCII码和扩展ASCII码,最全的ASCII码对照表(asciim.cn)</a>(每个字符占一个字节)</li></ul></li><li><p>字符串常量</p><p>结尾处有’\0’作为结束标志，占n+1个字节</p></li><li><p>混合运算</p><p>强制类型转换</p><p>(float)i</p><p>进行除法时需要转换类型<code>int i = 5; float k = float(i/2)</code>,否则默认整除</p></li><li><p>内存视图（集成开发环境看内存都用十六进制展示）（每个位置显示一个字节byte）</p><p>英特尔cpu采用小端方式进行数据存储，因此低位在前，高位在后（低位字节在前）</p><p><a href="https://blog.csdn.net/shuxiachai/article/details/127322794">(16条消息)王道C语言督学营OJ题解合集（24考研人持续更新ing）_王道c语言督学营资源-CSDN博客</a></p></li></ul><h3 id="函数">函数</h3><ul><li><p>printf</p><ul><li>原理：将不同类型的数据格式转化为字符串，放入标准输入缓冲区，然后将结果显示到屏幕上</li></ul><p>%c 以字符形式输出 %d 以整型输出</p><p>%3d 占三个空格的位置</p><p>浮点数%5.2 占五个空格 保留两位小数</p><p>默认右对齐，数字前加- 代表左对齐</p><p><a href="https://blog.csdn.net/qq_29874741/article/details/94626531">(16条消息)c语言printf()输出格式大全_printf输出格式_rusty_knife的博客-CSDN博客</a></p></li><li><p>scanf 读取数据</p><p>读取标准输入（键盘输入）</p><p><a href="https://zhuanlan.zhihu.com/p/436420553">scanf（"%d",&amp;a）回车无法结束输入问题- 知乎 (zhihu.com)</a></p><p>后面不能加</p><ul><li>输入回车后，</li></ul><p>标准输入缓冲区（最多输入4096字节）: 实际输入10，但scanf只读走了10</p><blockquote><p>如果剩余， scanf(”%c”,&amp;c)会把“”读走</p><p>解决：fflush（stdin）;清空标准输入缓冲区</p></blockquote><ul><li>scanf在读取整数%d、浮点数%f、字符串%s时会忽略‘’换行符、回车符等字符，读取字符%c时不会忽略，%c不会忽略任何字符，包括空格（32）</li><li>读取多个字符<code>scanf("%d %s%f",&amp;i,&amp;c,&amp;f)</code>，输入时在i和c之间加一个空格，</li><li>ret= scanf()代表匹配成功的个数（读取多个值时）问题解决：在%c前加一个空格</li><li>读取字符数组时，不需要取地址（字符数组中存储了地址信息），自动往字符数组中放结束符</li></ul></li><li><p>gets 读取一行（到）</p><p>遇到，不会存储，而是转化为结束符\0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">20</span>];</span><br><span class="line">    gets(c);<span class="comment">//gets中放入字符数组数组名即可</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>puts</p><p>puts(c) 等价于 printf(”%s”,c)，参数只能为字符数组名</p></li><li><p>str系列</p><p>引用<strong>#including &lt;string.h&gt;</strong></p><ul><li><p>strlen 获取字符串长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="built_in">strlen</span>(c);</span><br><span class="line"><span class="type">int</span> <span class="title function_">mystrlen</span><span class="params">(<span class="type">char</span> c[])</span>&#123;  <span class="comment">//自定义实现strlen函数</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(c[i])&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>strcopy(c,d)将一个数组的字符串复制到前面的数组中(d中复制给c)</p></li><li><p>strcat(c,d) 拼接两个字符数组</p></li><li><p>strcmp(e, c) 比较两个数组</p><p>相等，返回0不相等，比较大小（按asc码值比较）前大于后返回正值，前小于后返回负值</p><p>strcat和strcopy第一个参数要放数组名</p></li></ul></li></ul><h4 id="定义函数">定义函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> length)</span>&#123;    <span class="comment">//void 代表函数输出类型为空，此时可以不写return，如果是int代表输出为整数（return 0）</span></span><br><span class="line">       <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">for</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">       print(a, <span class="number">5</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><ul><li><p>短路运算</p><p>i&amp;&amp;表达式当i为假时，不会执行逻辑与后的表达式，称为短路运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">i&amp;&amp;<span class="title function_">printf</span><span class="params">(<span class="string">&quot;此时输出不了&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>i || 表达式 当i为真时，不会执行逻辑与后的表达式</p></li><li><p>赋值运算符 =</p><p>a+25 = b</p><p>左值报错：左侧没有变量lvalue required as left operand ofassignment</p></li><li><p>求字节运算符</p><p>sizeof 是一个运算符，不是函数(求常量或变量所占空间大小）</p></li></ul><p><a href="https://zhuanlan.zhihu.com/p/30007037#:~:text=%E8%BF%98%E6%98%AF%E7%94%A8%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%B8%A6%E5%87%BA%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%8C%E7%9C%8B%E4%B8%8B%E9%9D%A2%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%8C%E7%90%86%E8%AE%BA%E4%B8%8A%EF%BC%8C32%E4%BD%8D%E7%B3%BB%E7%BB%9F%E4%B8%8B%EF%BC%8Cint%E5%8D%A04byte%EF%BC%8Cchar%E5%8D%A0%E4%B8%80%E4%B8%AAbyte%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%86%E5%AE%83%E4%BB%AC%E6%94%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E5%BA%94%E8%AF%A5%E5%8D%A04%2B1%3D5byte%EF%BC%9B%E4%BD%86%E6%98%AF%E5%AE%9E%E9%99%85%E4%B8%8A%EF%BC%8C%E9%80%9A%E8%BF%87%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%BE%97%E5%88%B0%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF8,byte%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E3%80%82">C/C++内存对齐详解- 知乎 (zhihu.com)</a></p><ul><li><p>c语言中单引号‘’只能用来表示单个字符，如果出现多个字符，则编译出错</p></li><li><p>优先级：逻辑非&gt;算数运算符＞逻辑与＞逻辑或</p><p><a href="https://blog.csdn.net/changexhao/article/details/82556761">(16条消息)C语言运算符优先级列表(超详细)_c语言运算符优先级由高到低的顺序_Vance2016的博客-CSDN博客</a></p></li></ul><h3 id="数组">数组</h3><ul><li>定义格式： 类型说明符 数组名 [常量表达式]；</li><li>数组内元素类型必须相同</li><li>不能用变量说明数组大小</li><li>可以初始化一部分值，其它为0</li><li>可以不用写元素个数，编译器会自动计算数组大小（不推荐）a[]={1,2,3}</li></ul><p>例：int a[5]</p><ul><li><p>内存的存储</p><p>每个数据元素占用的字节数，就算基础类型的字节数，一个元素占4字节(int类型)</p></li><li><p>越界访问 access of bounds</p><p>越界访问会造成数据异常，操作系统对内存中每一个位置都给予编号，</p><p>Windows 32位控制台应用程序：0x00 00 00 00 到0xFF FF FFFF，总计为2的32次方，大小为4G，这些编号称为地址</p><p>危险之处：会改变其它变量的值（编译器不会检查）</p></li><li><p>数组的传递</p><ul><li><p>数组名传递到子函数后，子函数形参接收到是数组的起始地址，因此不能通过sizeof获得数组长度传递给子函数（弱化为了指针—大小为8字节）（只能自己定义一个变量传递数组长度）</p></li><li><p>传递时后面不用写数字，没有意义，不会传递过去</p></li></ul></li><li><p>字符数组</p><ul><li>初始化</li></ul><p>char c[10]={’I’,’b’,’c’,……}</p><p>char c[10] = “Iamhappy”使用这种方式初始化（实际为9个字符，最后一个用来存储‘\0’）</p><p>char c[6] = “happy”</p><p>printf(”%s”,c)直接输出字符串（如果是c[5]，没有结束符，则后面会输出乱码）</p><p>结束符\0的值为零（可以作为判断条件）</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>补码乘法的证明</title>
      <link href="/2023/07/15/%E8%A1%A5%E7%A0%81%E4%B9%98%E6%B3%95%E7%9A%84%E8%AF%81%E6%98%8E/"/>
      <url>/2023/07/15/%E8%A1%A5%E7%A0%81%E4%B9%98%E6%B3%95%E7%9A%84%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="补码乘法的证明">补码乘法的证明</h1><p>在刚开始学计算机组成的时候，因为不明白补码乘法规则的原理，网上找了很多说明的文章才搞明白，所以这里总结一下。<span id="more"></span></p><h2 id="booth算法">Booth算法</h2><p>首先要了解一下模的概念，“模”实质上是计量器产生“溢出”的量,它的值在计量器上表示不出来,计量器上只能表示出模的余数.任何有模的计量器,均可化减法为加法运算。</p><p>例如：时种的范围为1~12，那么它的模就等于12，如果我们要计算<span class="math inline">\(9-4\)</span>，即 <span class="math inline">\(9+(-4)\)</span>,就可以将-4替换为它的的补数8来实现（如果两个数绝对值之和等于模，则这两个数互为补数），<span class="math inline">\(9+8=17\)</span>，而超出模的部分机器会自动减去模加以修正，和时钟超出一圈后从原点开始原理相同，因此<span class="math inline">\(17 = 5（mod\12）\)</span>，利用加法实现了减法运算，补码原理相同，补码就是在原码真值基础上加模<span class="math inline">\(2^{n}\)</span>产生（n代表位数）。</p><p>首先设小数 <span class="math inline">\([x]_补 =x_0.x_1x_2x_3…x_n\)</span>，设<span class="math inline">\(x\)</span>为真值，此时模为2<strong>如果x为正数</strong>：则x = <span class="math inline">\(\sum_{i=1}^nx_i2^{-i}\)</span><strong>如果x为负数</strong>：则在这里 <span class="math inline">\([x]_补\)</span>的十进制数值（不是真值，真值是需要考虑符号位的）等于 <span class="math inline">\(x+2\)</span> 而<span class="math inline">\([x]_补\)</span>的真值还可以写成<span class="math inline">\(x_0+\sum_{i=1}^nx_i2^{-i}\)</span> <span class="math display">\[ 1+\sum_{i=1}^nx_i2^{-i} = x+2 \\x = -1 +\sum_{i=1}^nx_i2^{-i} \]</span></p><p>正数时可以写成<span class="math inline">\(-0+\sum_{i=1}^nx_i2^{-i}\)</span>，总结两种情况x的真值可以写成<span class="math inline">\(-x_0+\sum_{i=1}^nx_i2^{-i}\)</span>(注意这只是一个规律的总结，不是严格意义上的证明)</p><p>利用这个规律我们可以计算<span class="math inline">\([x\timesy]_补\)</span>,设 <span class="math inline">\([y]_补 =y_0.y_1y_2y_3…y_n\)</span>，</p><p><strong>当y&gt;0时，</strong><span class="math display">\[[x\timesy]_补 = [x\times \sum_{i=1}^ny_i2^{-i}]_补 \\= [x]_补 \times \sum_{i=1}^ny_i2^{-i} \]</span><strong>当y&lt;0时，</strong> y的真值为 <span class="math inline">\(\sum_{i=1}^ny_i2^{-i} - 1\)</span></p><p><span class="math display">\[[x\times y]_补 = [x\times(\sum_{i=1}^ny_i2^{-i}-1)]_补 \\= [x]_补 \times \sum_{i=1}^ny_i2^{-i}  - [x]_补 \]</span></p><p>同样总结规律可得：</p><p><span class="math display">\[[x\times y]_补   = [x]_补 \times\sum_{i=1}^ny_i2^{-i} - y_0[x]补 \]</span></p><p>这个式子可以展开一下： <span class="math display">\[[x\times y]_补   = [x]_补 \times （y_12^{-1} + y_2{-2}^2+ … +y_n2^{-n}）- y_0[x]补\]</span> 这一步是关键，将各个2的幂展开，再重新归类项 <span class="math display">\[\begin{aligned}&amp;= [x]_补 \times [ - y_0 + y_1(1 - 2^{-1}) + y_2(2^{-1}- 2^{-2})+ …+y_n(2^{-(n-1)} - 2^{-n})] \\&amp;= [x]_补 \times [(y_1 - y_0) + 2^{-1}(y_2-y_1) +  … +2^{-(n-1)}(y_n-y_{n-1})+2^{-n}(y_{n+1}-y_n)]\\&amp;(设y_{n+1}=0)\end{aligned}\]</span>上面的每一项我理解为乘算后每一位的大小，也就可知部分积（乘以<span class="math inline">\(2^{-1}\)</span>相当于右移一位）</p><p><span class="math display">\[ \begin{aligned}z_0 &amp;= 0\\z_1 &amp;= 2^{-1}[z_0 + [x]_补 \times (y_{n+1}-y_n)]\\…\\z_{n+1}&amp; = z_{n-1} + [x]_补 \times(y_{1}-y_0)\end{aligned}\]</span></p><p>因此根据补码两位之差就可以确定是 <span class="math inline">\(+[x]_补\)</span> 、 <span class="math inline">\(-[x]_补\)</span> 还是 <span class="math inline">\(+0\)</span> 了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法</title>
      <link href="/2023/07/14/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/07/14/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown基础语法">markdown基础语法</h1><span id="more"></span><h2 id="一块级元素">一、块级元素</h2><h3 id="标题">1. 标题：</h3><p>标题前打 # 号加空格，标题和world里的标题类似，采用六级标题</p><h1 id="一级">一级</h1><h2 id="二级">二级</h2><h3 id="三级">三级</h3><h4 id="四级">四级</h4><h5 id="五级">五级</h5><h6 id="六级">六级</h6><p class="heading" id="七级没有了">七级、没有了</p><h3 id="引用">2.引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一段引用</span><br></pre></td></tr></table></figure><blockquote><p>这是一段引用</p></blockquote><h3 id="有序列表和无序列表">3.有序列表和无序列表</h3><p>有序列表： 1. 第一步 2. 第二步 1. 二级列表（tab键实现） 1. 三级列表3. ……</p><p>无序列表（使用 - 、 + 或 * ） <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 春</span><br><span class="line"><span class="bullet">+</span> 夏</span><br><span class="line"><span class="bullet">*</span> 秋</span><br><span class="line"><span class="bullet">-</span> 冬</span><br></pre></td></tr></table></figure> - 春 - 夏 - 秋 - 冬</p><h3 id="to-do-list">4.to-do list</h3><p>一个负号+空格+方括号+空格，注意方括号前后和里面都要加空格。可以写成<code>[x]</code>表示完成- [x] 学习 - [ ] 吃饭 - [ ] 睡觉</p><h3 id="代码块">5.代码块</h3><p>三个波浪号（~）后加语言名称，如c、python，代码结束再以三个 ~ 结尾。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 6.高亮 内容前后加两个等于号 ==哈哈哈==</p><h3 id="数学函数">7.数学函数</h3><p><span class="math display">\[\frac{\partial f}{\partial x} = 2\sqrt{a}x\]</span></p><h1 id="二markdown快捷键">二、markdown快捷键</h1><ul><li>ctrl+b 加粗</li><li>ctrl+i 变斜体</li><li>ctrl+m 公式起止符</li></ul><p><a href="https://zhuanlan.zhihu.com/p/142988176">为什么写博客都用markdown</a></p><p><img src="/2023/07/14/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/QQ图片20220627104509.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs小记</title>
      <link href="/2023/07/14/nodejs/"/>
      <url>/2023/07/14/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="node.js">node.js</h1><span id="more"></span><blockquote><p>nodejs是一款应用程序，是一款软件，可以运行javascrip</p></blockquote><p>服务器：保存html、css、javascript</p><p>nodejs：运行在服务器端，处理用户的请求</p><p>作用：</p><ul><li>开发服务器应用</li><li>开发工具类应用：（基于nodejs）webpack vite babel</li><li>桌面端应用：nodejs——electron——vscode、figma、postman</li></ul><p>下载：LTS（long term support ）长期支持</p><p><a href="https://nodejs.cn/download/">下载 | Node.js 中文网(nodejs.cn)</a></p><p>所有版本：<a href="https://registry.npmmirror.com/binary.html?path=node/">CNPMBinaries Mirror (npmmirror.com)</a></p><h2 id="命令提示符">1.命令提示符</h2><p>切换盘符：C: D:</p><p>切换工作目录 cd</p><p>查看目录文件 dir 查看目录下所有文件 dir /s</p><p>结束输出 ctrl+c</p><p>方向键上下键：调出命令历史</p><p>tab键：补全目录文件名称</p><p>注意点：Node.js中不能使用BOM和DOM的API</p><p>可以使用：console和定时器</p><p>顶级对象：global （在浏览器中是window）</p><p>globalThis 指向顶级对象 等同于global</p><h2 id="buffer">2.Buffer</h2><p>是一段固定长度的内存空间，用于处理二进制数据</p><blockquote><ol type="1"><li>大小固定</li><li>性能较好，可以直接操作计算机内存</li><li>每个元素大小为1字节</li></ol></blockquote><p>创建：</p><p>Buffer.alloc(10)</p><p>Buffer.allocUnsafe(10) 创建时不会清除原先的数据，因此速度更快</p><p>Buffer.from() 从数组、字符串创建buffer</p><p>buf.toString() toString(2) 进制转换</p><p>溢出：舍弃高位数据</p><p>中文：一个utf-8的中文占3个字节</p><h2 id="fs模块file-system-文件系统">3.fs模块（file system文件系统）</h2><h3 id="导入fs模块">3.1. 导入fs模块</h3><p>const fs = require(’fs’)</p><p>fs.writeFile</p><h3 id="文件读写">3.2. 文件读写</h3><p>异步工作模式：先顺序执行代码（主线程：解析js代码IO线程：写入文件，写入结束后将回调函数压入到队列中）</p><p>同步写入 fs.writeFileSync(’’,’’test’)</p><p>追加写入 fs.appendFile()</p><p>流式写入 const ws = fs.createWriteStream(文件名)</p><p>ws.write(内容)</p><p>流式读出 const rs = fs.createReadStream()</p><p>rs.on(’data’, chunk ⇒{})</p><p>rs.on(’end’, {回调函数}）</p><h3 id="文件重命名与移动">3.3. 文件重命名与移动</h3><p>fs.rename(旧路径， 新路径， 回调函数）</p><h3 id="文件删除-fs.rm-fs.unlink">3.4. 文件删除 fs.rm fs.unlink</h3><h3 id="文件夹操作">3.5. 文件夹操作</h3><figure><img src="/2023/07/14/nodejs/Untitled.png" alt="文件夹操作"><figcaption aria-hidden="true">文件夹操作</figcaption></figure><h3 id="查看文件状态">3.6. 查看文件状态</h3><p>fs.stat(文件名，{ .isFile() 是否为文件 .isDirectory()是否为文件夹})</p><h3 id="相对路径">3.7. 相对路径</h3><p><strong>是以命令行的工作目录为基准，dirname保存了当前文件所在目录的绝对路径（可以避免工作目录变化导致程序错误）filename(当前文件的绝对路径）</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一个blog：hexo建站遇到的一些问题</title>
      <link href="/2023/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="网站搭建">1. 网站搭建</h1><h2 id="博客预览卡片">1.1. 博客预览卡片</h2><p>刚开始写博客整篇内容都在首页上，找了半天才发现原来是少了这行代码</p><figure><img src="/2023/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2023-07-14-22-58-33.png" alt="2023-07-14-22-58-33.png"><figcaption aria-hidden="true">2023-07-14-22-58-33.png</figcaption></figure><p>代码前面的内容会出现在预览卡片上，后面的内容点进去才可以看到</p><h2 id="hexo插入图片无效">1.2. hexo插入图片无效</h2><p>markdown中添加图片后，hexo加载不出来，搜索了一下需要安装hexo-asset-image插件，结果应该是过时了，还是没有成功加载，后来在知乎上一位大佬提供了解决方法。</p><p>https://zhuanlan.zhihu.com/p/280758822 &gt;-修改_config.yml中的post_asset_folder: true &gt;-<code>$ npm install hexo-image-link --save</code> &gt;- 如果npm下载比较慢的话，尝试 cnpm下载 &gt; -<code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code>&gt; - <code>$ cnpm install hexo-image-link --save</code> &gt;-修改md文件中的图片路径</p><p>问题终于解决。</p><h1 id="写博客">2. 写博客</h1><h2 id="vscode直接粘贴图片到对应文件夹下">2.1.vscode直接粘贴图片到对应文件夹下</h2><p>首先安装插件paste image <img src="/2023/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2023-07-14-23-18-33.png" alt="2023-07-14-23-18-33.png"></p><p>如果我们想要设置只在当前工作区生效，就在当前博客文件夹下建立<code>.vscode</code>文件夹，在刚创立的文件夹中创建<code>settings.json</code>文件，然后添加代码，当然也可以在全局设置中修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;pasteImage.path&quot;</span>: <span class="string">&quot;$&#123;currentFileDir&#125;/$&#123;currentFileNameWithoutExt&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pasteImage.basePath&quot;</span>: <span class="string">&quot;$&#123;currentFileDir&#125;/$&#123;currentFileNameWithoutExt&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pasteImage.prefix&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pasteImage.insertPattern&quot;</span>: <span class="string">&quot;![$&#123;imageFileName&#125;]($&#123;currentFileNameWithoutExt&#125;$&#123;imageFilePath&#125;$&#123;imageSyntaxSuffix&#125;&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们按ctrl+alt+v（注意不是ctrl+v）就可以直接将图片拷贝到对应文件夹中啦。</p><h2 id="hexo渲染代码段不换行">2.2. hexo渲染代码段不换行</h2><p><img src="/2023/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2023-07-15-10-40-24.png" alt="2023-07-15-10-40-24.png"> 待解决</p><h2 id="主题配置">2.3. 主题配置</h2><p><a href="https://blog.csdn.net/qq_53517370/article/details/128911597">particlex主题配置</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/APlayer.min.css"/>
      <url>/css/APlayer.min.css</url>
      
        <content type="html"><![CDATA[.aplayer {  background: #fff;  font-family: Arial, Helvetica, sans-serif;  margin: 5px;  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .07), 0 1px 5px 0 rgba(0, 0, 0, .1);  border-radius: 2px;  overflow: hidden;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;  line-height: normal;  position: relative}.aplayer * {  box-sizing: content-box}.aplayer svg {  width: 100%;  height: 100%}.aplayer svg circle,.aplayer svg path {  fill: #fff}.aplayer.aplayer-withlist .aplayer-info {  border-bottom: 1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list {  display: block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu {  display: inline}.aplayer.aplayer-withlrc .aplayer-pic {  height: 90px;  width: 90px}.aplayer.aplayer-withlrc .aplayer-info {  margin-left: 90px;  height: 90px;}.aplayer.aplayer-withlrc .aplayer-lrc {  display: block}.aplayer.aplayer-narrow {  width: 66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list {  display: none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic {  height: 66px;  width: 66px}.aplayer.aplayer-fixed {  position: fixed;  bottom: 0;  left: 0;  right: 0;  margin: 0;  z-index: 99;  overflow: visible;  max-width: 400px;  box-shadow: none}.aplayer.aplayer-fixed .aplayer-list {  margin-bottom: 65px;  border: 1px solid #eee;  border-bottom: none}.aplayer.aplayer-fixed .aplayer-body {  position: fixed;  bottom: 0;  left: 0;  right: 0;  margin: 0;  z-index: 99;  background: #fff;  padding-right: 18px;  transition: all .3s ease;  max-width: 400px}.aplayer.aplayer-fixed .aplayer-lrc {  display: block;  position: fixed;  bottom: 10px;  left: 0;  right: 0;  margin: 0;  z-index: 98;  pointer-events: none;  text-shadow: -1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before {  display: none}.aplayer.aplayer-fixed .aplayer-info {  -webkit-transform: scaleX(1);  transform: scaleX(1);  -webkit-transform-origin: 0 0;  transform-origin: 0 0;  transition: all .3s ease;  border-bottom: none;  border-top: 1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music {  width: calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher {  display: block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info {  display: block;  -webkit-transform: scaleX(0);  transform: scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  width: 66px !important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon {  -webkit-transform: rotateY(0);  transform: rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play {  display: inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play {  position: absolute;  bottom: 27px;  width: 20px;  height: 20px}.aplayer.aplayer-fixed .aplayer-icon-back {  right: 75px}.aplayer.aplayer-fixed .aplayer-icon-play {  right: 50px}.aplayer.aplayer-fixed .aplayer-icon-forward {  right: 25px}.aplayer.aplayer-fixed .aplayer-icon-menu {  right: 0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down {  display: none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon {  display: block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb {  -webkit-transform: scale(1);  transform: scale(1)}.aplayer .aplayer-body {  position: relative}.aplayer .aplayer-icon {  width: 15px;  height: 15px;  border: none;  background-color: transparent;  outline: none;  cursor: pointer;  opacity: .8;  vertical-align: middle;  padding: 0;  font-size: 12px;  margin: 0;  display: inline-block;}.aplayer .aplayer-icon path {  transition: all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play {  display: none}.aplayer .aplayer-icon-lrc-inactivity svg {  opacity: .4}.aplayer .aplayer-icon-forward {  -webkit-transform: rotate(180deg);  transform: rotate(180deg)}.aplayer .aplayer-lrc-content {  display: none}.aplayer .aplayer-pic {  position: relative;  float: left;  height: 66px;  width: 66px;  background-size: cover;  background-position: 50%;  transition: all .3s ease;  cursor: pointer}.aplayer .aplayer-pic:hover .aplayer-button {  opacity: 1}.aplayer .aplayer-pic .aplayer-button {  position: absolute;  border-radius: 50%;  opacity: .8;  text-shadow: 0 1px 1px rgba(0, 0, 0, .2);  box-shadow: 0 1px 1px rgba(0, 0, 0, .2);  background: rgba(0, 0, 0, .2);  transition: all .1s ease}.aplayer .aplayer-pic .aplayer-button path {  fill: #fff}.aplayer .aplayer-pic .aplayer-hide {  display: none}.aplayer .aplayer-pic .aplayer-play {  width: 26px;  height: 26px;  border: 2px solid #fff;  bottom: 50%;  right: 50%;  margin: 0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg {  position: absolute;  top: 3px;  left: 4px;  height: 20px;  width: 20px}.aplayer .aplayer-pic .aplayer-pause {  width: 16px;  height: 16px;  border: 2px solid #fff;  bottom: 4px;  right: 4px}.aplayer .aplayer-pic .aplayer-pause svg {  position: absolute;  top: 2px;  left: 2px;  height: 12px;  width: 12px}.aplayer .aplayer-info {  margin-left: 66px;  padding: 14px 7px 0 10px;  height: 66px;  box-sizing: border-box}.aplayer .aplayer-info .aplayer-music {  overflow: hidden;  white-space: nowrap;  text-overflow: ellipsis;  margin: 0 0 13px 5px;  -webkit-user-select: text;  -moz-user-select: text;  -ms-user-select: text;  user-select: text;  cursor: default;  padding-bottom: 2px;  height: 20px}.aplayer .aplayer-info .aplayer-music .aplayer-title {  font-size: 14px}.aplayer .aplayer-info .aplayer-music .aplayer-author {  font-size: 12px;  color: #666}.aplayer .aplayer-info .aplayer-controller {  position: relative;  display: flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap {  margin: 0 0 0 5px;  padding: 4px 0;  cursor: pointer !important;  flex: 1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb {  -webkit-transform: scale(1);  transform: scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar {  position: relative;  height: 2px;  width: 100%;  background: #cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded {  position: absolute;  left: 0;  top: 0;  bottom: 0;  background: #aaa;  height: 2px;  transition: all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played {  position: absolute;  left: 0;  top: 0;  bottom: 0;  height: 2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb {  position: absolute;  top: 0;  right: 5px;  margin-top: -4px;  margin-right: -10px;  height: 10px;  width: 10px;  border-radius: 50%;  cursor: pointer;  transition: all .3s ease-in-out;  -webkit-transform: scale(0);  transform: scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time {  position: relative;  right: 0;  bottom: 4px;  height: 17px;  color: #999;  font-size: 11px;  padding-left: 7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner {  vertical-align: middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon {  cursor: pointer;  transition: all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path {  fill: #666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop {  margin-right: 2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path {  fill: #000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode {  display: none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap {  position: relative;  display: inline-block;  margin-left: 3px;  cursor: pointer !important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap {  height: 40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap {  position: absolute;  bottom: 5px;  right: 6px;  width: 25px;  height: 0;  z-index: 99;  overflow: hidden;  transition: all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active {  height: 40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar {  position: absolute;  bottom: 0;  right: 10px;  width: 5px;  height: 35px;  background: var(--heo-white-op);  border-radius: 2.5px;  overflow: hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume {  position: absolute;  bottom: 0;  right: 0;  width: 5px;  transition: all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon {  display: none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg {  position: absolute;  -webkit-animation: rotate 1s linear infinite;  animation: rotate 1s linear infinite}.aplayer .aplayer-lrc {  display: none;  position: relative;  height: 30px;  text-align: center;  overflow: hidden;  margin: -10px 0 7px}.aplayer .aplayer-lrc:before {  top: 0;  height: 10%;  background: linear-gradient(180deg, #fff 0, hsla(0, 0%, 100%, 0));  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#ffffff", endColorstr="#00ffffff", GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before {  position: absolute;  z-index: 1;  display: block;  overflow: hidden;  width: 100%;  content: " "}.aplayer .aplayer-lrc:after {  bottom: 0;  height: 33%;  background: linear-gradient(180deg, hsla(0, 0%, 100%, 0) 0, hsla(0, 0%, 100%, .8));  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#00ffffff", endColorstr="#ccffffff", GradientType=0)}.aplayer .aplayer-lrc p {  font-size: 12px;  color: var(--heo-white);  padding: 0;  margin: 0;  transition: all .5s ease-out;  opacity: .4;  overflow: hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current {  opacity: 1;  overflow: inherit;  height: auto;}.aplayer .aplayer-lrc.aplayer-lrc-hide {  display: none}.aplayer .aplayer-lrc .aplayer-lrc-contents {  width: 100%;  transition: all .5s ease-out;  -webkit-user-select: text;  -moz-user-select: text;  -ms-user-select: text;  user-select: text;  cursor: default}.aplayer .aplayer-list {  overflow: auto;  transition: all .5s ease;  will-change: height;  display: none;  overflow: hidden}.aplayer .aplayer-list.aplayer-list-hide {  max-height: 0 !important}.aplayer .aplayer-list ol {  list-style-type: none;  margin: 0;  padding: 0;  overflow-y: auto}.aplayer .aplayer-list ol::-webkit-scrollbar {  width: 5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb {  border-radius: 3px;  background-color: #eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover {  background-color: #ccc}.aplayer .aplayer-list ol li {  position: relative;  height: 32px;  line-height: 32px;  padding: 0 15px;  font-size: 12px;  cursor: pointer;  transition: all .2s ease;  overflow: hidden;  margin: 1px 0;}.aplayer .aplayer-list ol li:first-child {  border-top: none}.aplayer .aplayer-list ol li:hover {  background: #efefef}.aplayer .aplayer-list ol li.aplayer-list-light {  background: #e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur {  display: inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur {  display: none;  width: 3px;  height: 22px;  position: absolute;  left: 0;  top: 5px;  cursor: pointer}.aplayer .aplayer-list ol li .aplayer-list-index {  color: var(--heo-white);  opacity: 0.6;  margin-right: 6px;  cursor: pointer}.aplayer .aplayer-list ol li .aplayer-list-author {  color: #666;  float: right;  cursor: pointer}.aplayer .aplayer-notice {  opacity: 0;  position: absolute;  top: 50%;  left: 50%;  -webkit-transform: translate(-50%, -50%);  transform: translate(-50%, -50%);  font-size: 12px;  border-radius: 4px;  padding: 5px 10px;  transition: all .3s ease-in-out;  overflow: hidden;  color: #fff;  pointer-events: none;  background-color: #f4f4f5;  color: #909399}.aplayer .aplayer-miniswitcher {  display: none;  position: absolute;  top: 0;  right: 0;  bottom: 0;  height: 100%;  background: #e6e6e6;  width: 18px;  border-radius: 0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon {  height: 100%;  width: 100%;  -webkit-transform: rotateY(180deg);  transform: rotateY(180deg);  transition: all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path {  fill: #666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path {  fill: #000}@-webkit-keyframes aplayer-roll {  0% {    left: 0  }  to {    left: -100%  }}@keyframes aplayer-roll {  0% {    left: 0  }  to {    left: -100%  }}@-webkit-keyframes rotate {  0% {    -webkit-transform: rotate(0);    transform: rotate(0)  }  to {    -webkit-transform: rotate(1turn);    transform: rotate(1turn)  }}@keyframes rotate {  0% {    -webkit-transform: rotate(0);    transform: rotate(0)  }  to {    -webkit-transform: rotate(1turn);    transform: rotate(1turn)  }}/*# sourceMappingURL=APlayer.min.css.map*/]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/music_main.css"/>
      <url>/css/music_main.css</url>
      
        <content type="html"><![CDATA[#page:has(#anMusic-page) {  border: 0;  box-shadow: none !important;  padding: 0 !important;  background: transparent !important;}#an_music_bg {  display: none;  filter: blur(63px);  opacity: 0.6;  position: fixed;  z-index: -999;  background-attachment: local;  background-position: center center;  background-size: cover;  background-repeat: no-repeat;  width: 200%;  height: 200%;  top: -50%;  left: -50%;  transform: rotate(0deg);}body:has(#anMusic-page) #an_music_bg {  display: block;}body:has(#anMusic-page) {  background: rgb(13, 13, 13);}#anMusic-page meting-js .aplayer {  display: flex;  flex-direction: row-reverse;  background: rgba(0, 0, 0, 0);  border: none;  box-shadow: none;}body:has(#anMusic-page) #web_bg {  display: none;}body:has(#anMusic-page) #footer,body:has(#anMusic-page) #nav-music {  display: none;}#anMusic-page .aplayer-body {  width: 40%;  height: 75vh;}#anMusic-page ol > li:hover {  background: #ffffff33;  border-radius: 6px;}#anMusic-page .aplayer-pic {  float: none;  width: 180px;  height: 180px;  border-radius: 12px;  margin: auto;  left: 0;  right: 0;}#anMusic-page .aplayer-info {  margin: 0 20px 0 20px;  border-bottom: none;}#anMusic-page .aplayer-info .aplayer-music {  text-align: center;  height: auto;  margin: 15px;}#anMusic-page .aplayer-info .aplayer-music .aplayer-author,#anMusic-page .aplayer-info .aplayer-music .aplayer-title {  font-size: 2rem;  font-weight: 700;  color: #fff;}#anMusic-page .aplayer-info .aplayer-lrc {  height: 800%;  margin-top: 80px;  mask-image: linear-gradient(to bottom, #000, #000, #000, #000, #000, #000, #000, #000, #000, #000, #0000, #0000);}#anMusic-page .aplayer-info .aplayer-lrc p {  font-size: 14px;  color: #fff;}#anMusic-page .aplayer .aplayer-lrc:after,#anMusic-page .aplayer .aplayer-lrc:before {  display: none;}/* 控制器 */#anMusic-page .aplayer-info .aplayer-controller {  position: fixed;  max-width: 1500px;  margin: auto;  left: 0;  right: 0;  bottom: 50px;}#anMusic-page .aplayer-info .aplayer-controller .aplayer-bar-wrap {  margin: 0 160px 0 150px;}#anMusic-page .aplayer-info .aplayer-controller .aplayer-played {  background: var(--anzhiyu-white) !important;}#anMusic-page .aplayer-info .aplayer-controller .aplayer-thumb {  -webkit-transform: none;  transform: none;  background: #fff !important;}#anMusic-page .aplayer-info .aplayer-time .aplayer-icon-back,#anMusic-page .aplayer-info .aplayer-time .aplayer-icon-forward,#anMusic-page .aplayer-info .aplayer-time .aplayer-icon-play {  display: inline;  position: fixed;}#anMusic-page .aplayer-info .aplayer-time {  position: absolute;  width: 100%;  bottom: 21px;  height: 0;  display: flex;  justify-content: flex-end;}#anMusic-page .aplayer-info .aplayer-time .aplayer-time-inner {  margin-right: 18px;  margin-top: -8px;}#anMusic-page .aplayer-info .aplayer-time .aplayer-icon-back {  position: absolute;  left: 0;}#anMusic-page .aplayer-info .aplayer-time .aplayer-icon-play {  position: absolute;  left: 40px;}#anMusic-page .aplayer-info .aplayer-time .aplayer-icon-forward {  position: absolute;  left: 80px;}#anMusic-page .aplayer-info .aplayer-time .aplayer-icon {  width: 2rem;  height: 2rem;  margin-left: 15px;}#anMusic-page .aplayer-info .aplayer-time .aplayer-icon-menu {  display: none;}#anMusic-page .aplayer-info .aplayer-time .aplayer-icon path {  fill: var(--anzhiyu-white);  opacity: 0.8;}#anMusic-page .aplayer-list {  width: 60%;  max-height: none !important;  height: 100%;}#anMusic-page ol {  max-height: 75vh !important;  padding-right: 25px;}#anMusic-page ol > li {  border-top: 1px solid transparent;  font-size: 14px;}#anMusic-page ol > li.aplayer-list-light {  background: rgb(255 255 255 / 20%);  border-radius: 6px;}#anMusic-page ol > li span {  color: var(--anzhiyu-white);}#anMusic-page ol > li.aplayer-list-light .aplayer-list-cur {  display: none;}#anMusic-page ol > li span.aplayer-list-author {  opacity: 0.6;}/* 导航栏 */.page:has(#anMusic-page) #nav {  backdrop-filter: none !important;  background: 0 0 !important;  border-bottom: none !important;}.page:has(#anMusic-page) #page-header.not-top-img #nav a,.page:has(#anMusic-page) #page-header #nav .back-home-button {  color: var(--anzhiyu-white);}body:has(#anMusic-page) .s-sticker div {  color: var(--anzhiyu-white) !important;}body:has(#anMusic-page) .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop {  margin-right: 15px;}[data-theme="dark"] .page:has(#anMusic-page) #page-header:before {  background-color: transparent;}/* **** 移动端样式 ***** */@media screen and (max-width: 768px) {  body:has(#anMusic-page) #rightside {    display: none;  }  body:has(#anMusic-page) #content-inner,  body:has(#anMusic-page) #page {    z-index: auto;  }  /* 歌曲列表 */  #anMusic-page .aplayer-list {    position: fixed;    z-index: 1002;    width: 100%;    bottom: -76%;    left: 0;    background: var(--sidebar-bg);    height: auto;    border-radius: 15px 15px 0px 0px;    padding: 15px 0px;  }  #anMusic-page .aplayer-list.aplayer-list-hide {    bottom: 0% !important;  }  #anMusic-page ol {    max-height: 60vh !important;    padding-right: 0px;  }  #anMusic-page ol > li {    display: flex;    margin: 0 10px;  }  #anMusic-page ol > li span {    color: var(--font-color);  }  #anMusic-page ol > li span.aplayer-list-title {    width: 30%;  }  #anMusic-page ol > li.aplayer-list-light {    background: #33a673;    padding: 5px 20px;    border-radius: 10px;  }  #anMusic-page ol > li.aplayer-list-light span {    color: #fff;  }  #anMusic-page ol > li span.aplayer-list-title {    max-width: 55%;    width: auto;    display: -webkit-box;    -webkit-line-clamp: 1;    overflow: hidden;    -webkit-box-orient: vertical;  }  #anMusic-page ol > li span.aplayer-list-author {    position: absolute;    right: 10px;    width: auto;    max-width: 35%;    display: -webkit-box;    -webkit-line-clamp: 1;    overflow: hidden;    -webkit-box-orient: vertical;  }  #anMusic-page ol > li.aplayer-list-light span.aplayer-list-author {    right: 15px;  }  /* 歌词信息 */  #anMusic-page .aplayer-body {    width: 100%;    position: fixed;    margin: auto;    left: 0;    right: 0;    top: 100px;  }  #anMusic-page .aplayer-info .aplayer-lrc {    margin-top: 40px;    height: auto;    max-height: 200%;    min-height: 100%;    mask-image: linear-gradient(to bottom, #000, #000, #000, #000, #0000, #0000);  }  #anMusic-page .aplayer-info .aplayer-lrc p.aplayer-lrc-current {    color: #33a673;  }  /* 控制按键和进度条 */  #anMusic-page .aplayer-info .aplayer-controller {    width: 100%;    bottom: 100px;  }  #anMusic-page .aplayer-info .aplayer-controller .aplayer-bar-wrap {    margin: 0 30px;  }  #anMusic-page .aplayer-info .aplayer-time {    bottom: -40px;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-time-inner {    position: absolute;    width: 100%;    margin-right: 0;    margin-top: -33px;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-time-inner .aplayer-dtime {    position: absolute;    right: 30px;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-time-inner .aplayer-ptime {    position: absolute;    left: 35px;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-icon-back {    margin: auto;    right: 110px;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-icon-play {    margin: auto;    right: 0;    left: 0;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-icon-forward {    margin: auto;    left: 110px;    right: 0;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-icon-order {    position: absolute;    left: 22px;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-icon-loop {    position: absolute;    right: 25px;  }  #anMusic-page .aplayer-info .aplayer-time .aplayer-icon-menu {    display: inline;    position: absolute;    right: 25px;    top: -90px;  }  #anMusic-page .aplayer-volume-bar-wrap {    bottom: 0px;    right: 7px;  }  #anMusic-page .aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap {    left: -66px;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/music_ball.css"/>
      <url>/css/music_ball.css</url>
      
        <content type="html"><![CDATA[/* 颜色 *//* 博主的全部变量 */:root {    --anzhiyu-theme-op: #4259ef23;    --anzhiyu-card-bg-none: rgba(255, 255, 255, 0);    --anzhiyu-main-op-deep: var(--anzhiyu-theme-op-deep) !important;    --anzhiyu-gray-op: #9999992b;    --anzhiyu-theme-top: var(--anzhiyu-theme);    --anzhiyu-white: #fff;    --anzhiyu-white-op: rgba(255, 255, 255, 0.2);    --anzhiyu-black: #000;    --anzhiyu-black-op: rgba(0, 0, 0, 0.2);    --anzhiyu-none: rgba(0, 0, 0, 0);    --anzhiyu-gray: #999999;    --anzhiyu-yellow: #ffc93e;    --anzhiyu-orange: #e38100;    --anzhiyu-border-radius: 8px;    --anzhiyu-main: var(--anzhiyu-theme);    --anzhiyu-main-op: var(--anzhiyu-theme-op);    --anzhiyu-shadow-theme: 0 8px 12px -3px var(--anzhiyu-theme-op);    --anzhiyu-shadow-main: 0 8px 12px -3px var(--anzhiyu-main-op);    --anzhiyu-shadow-blue: 0 8px 12px -3px rgba(40, 109, 234, 0.2);    --anzhiyu-shadow-white: 0 8px 12px -3px rgba(255, 255, 255, 0.2);    --anzhiyu-shadow-black: 0 0 12px 4px rgba(0, 0, 0, 0.05);    --anzhiyu-shadow-yellow: 0px 38px 77px -26px rgba(255, 201, 62, 0.12);    --anzhiyu-shadow-red: 0 8px 12px -3px #ee7d7936;    --anzhiyu-shadow-green: 0 8px 12px -3px #87ee7936;    --anzhiyu-shadow-border: 0 8px 16px -4px #2c2d300c;    --anzhiyu-shadow-blackdeep: 0 2px 16px -3px rgba(0, 0, 0, 0.15);    --anzhiyu-logo-color: linear-gradient(215deg, #4584ff 30%, #ff7676 70%);    --style-border: 1px solid var(--anzhiyu-card-border);    --anzhiyu-blue-main: #3b70fc;    --style-border-hover: 1px solid var(--anzhiyu-main);    --style-border-dashed: 1px dashed var(--anzhiyu-theme-op);    --style-border-avatar: 4px solid var(--anzhiyu-background);    --style-border-always: 1px solid var(--anzhiyu-card-border);    --style-border-none: 1px solid transparent;    --anzhiyu-white-acrylic1: #fefeff !important;    --anzhiyu-white-acrylic2: #fcfdff !important;    --anzhiyu-black-acrylic2: #08080a !important;    --anzhiyu-black-acrylic1: #0b0b0e !important;    --anzhiyu-main-none: #b8b8b800 !important;  }    [data-theme="light"] {    --anzhiyu-theme-op-deep: #4259efdd;    --global-bg: #f7f9fe;    --anzhiyu-theme: #3b70fc;    --anzhiyu-theme-deep: #1856fb;    --anzhiyu-theme-op: #4259ef23;    --anzhiyu-blue: #3b70fc;    --anzhiyu-red: #d8213c;    --anzhiyu-pink: #ff7c7c;    --anzhiyu-green: #57bd6a;    --anzhiyu-fontcolor: #363636;    --anzhiyu-background: #f7f9fe;    --anzhiyu-reverse: #000;    --anzhiyu-maskbg: rgba(255, 255, 255, 0.6);    --anzhiyu-maskbgdeep: rgba(255, 255, 255, 0.85);    --anzhiyu-hovertext: var(--anzhiyu-theme);    --anzhiyu-ahoverbg: #f7f7fa;    --anzhiyu-lighttext: var(--anzhiyu-main);    --anzhiyu-secondtext: rgba(60, 60, 67, 0.6);    --anzhiyu-scrollbar: rgba(60, 60, 67, 0.4);    --anzhiyu-card-btn-bg: #edf0f7;    --anzhiyu-post-blockquote-bg: #fafcff;    --anzhiyu-post-tabs-bg: #f2f5f8;    --anzhiyu-secondbg: #f1f3f8;    --anzhiyu-shadow-nav: 0 5px 12px -5px rgba(102, 68, 68, 0.05);    --anzhiyu-card-bg: #fff;    --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-card-border: #e3e8f7;  }    [data-theme="dark"] {    --anzhiyu-theme-op-deep: #0084ffdd;    --global-bg: #18171d;    --anzhiyu-theme: #0084ff;    --anzhiyu-theme-deep: #0076e5;    --anzhiyu-theme-op: #0084ff23;    --anzhiyu-blue: #0084ff;    --anzhiyu-red: #ff3842;    --anzhiyu-pink: #ff7c7c;    --anzhiyu-green: #57bd6a;    --anzhiyu-fontcolor: #f7f7fa;    --anzhiyu-background: #18171d;    --anzhiyu-reverse: #fff;    --anzhiyu-maskbg: rgba(0, 0, 0, 0.6);    --anzhiyu-maskbgdeep: rgba(0, 0, 0, 0.85);    --anzhiyu-hovertext: #0a84ff;    --anzhiyu-ahoverbg: #fff;    --anzhiyu-lighttext: #f2b94b;    --anzhiyu-secondtext: #a1a2b8;    --anzhiyu-scrollbar: rgba(200, 200, 223, 0.4);    --anzhiyu-card-btn-bg: #30343f;    --anzhiyu-post-blockquote-bg: #000;    --anzhiyu-post-tabs-bg: #121212;    --anzhiyu-secondbg: #30343f;    --anzhiyu-shadow-nav: 0 5px 20px 0px rgba(28, 28, 28, 0.4);    --anzhiyu-card-bg: #1d1b26;    --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-card-border: #42444a;  }  /* 音乐播放器 *//* aplayer.css */.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic {  height: 66px;  width: 66px;}#page:has(.aplayer):has(.aplayer-body):has(.aplayer-list) #post-comment .tk-comments-container > .tk-comment {  border: none;  box-shadow: none;}/* 导航栏音乐 */@media screen and (max-width: 1300px) {  #nav-music {    display: none !important;  }}#nav-music {  display: flex;  align-items: center;  z-index: 9;  position: fixed;  bottom: 20px;  left: 20px;  cursor: pointer;  transition: 0.5s;  transform-origin: left bottom;  box-shadow: var(--anzhiyu-shadow-border);  border-radius: 40px;  overflow: hidden;}#nav-music:active {  transform: scale(0.97);}#nav-music.playing {  box-shadow: 0 0px 12px -3px var(--anzhiyu-none);  animation: playingShadow 5s linear infinite;}@keyframes playingShadow {  0% {    box-shadow: 0 0px 12px -3px var(--anzhiyu-none);  }  50% {    box-shadow: 0 0px 12px 0px var(--anzhiyu-main);  }  100% {    box-shadow: 0 0px 12px -3px var(--anzhiyu-none);  }}#nav-music .aplayer.aplayer-withlrc .aplayer-pic {  height: 25px;  width: 25px;  border-radius: 40px;  z-index: 1;  transition: 0.3s;  transform: rotate(0deg) scale(1);  border: var(--style-border-always);  animation: changeright 24s linear infinite;  animation-play-state: paused;}#nav-music.playing .aplayer.aplayer-withlrc .aplayer-pic {  box-shadow: 0 0 14px #ffffffa6;  transform: rotate(0deg) scale(1.1);  border-color: var(--anzhiyu-white);  animation-play-state: running;}@keyframes changeright {  0% {    transform: rotate(0deg) scale(1.1);    box-shadow: 0 0 2px #ffffff00;  }  25% {    transform: rotate(90deg) scale(1.1);    box-shadow: 0 0 14px #ffffff;  }  50% {    transform: rotate(180deg) scale(1.1);    box-shadow: 0 0 2px #ffffff00;  }  75% {    transform: rotate(270deg) scale(1.1);    box-shadow: 0 0 14px #ffffff;  }  100% {    transform: rotate(360deg) scale(1.1);    box-shadow: 0 0 2px #ffffff00;  }}#nav-music .aplayer.aplayer-withlrc .aplayer-info {  height: 100%;  color: var(--anzhiyu-fontcolor);  margin: 0;  padding: 0;  display: flex;  align-items: center;}#nav-music.playing .aplayer.aplayer-withlrc .aplayer-info {  color: var(--anzhiyu-white);}#nav-music.playing #nav-music-hoverTips {  width: 0;  opacity: 0;}#nav-music #nav-music-hoverTips {  color: var(--anzhiyu-white);  background: var(--anzhiyu-main);  width: 100%;  height: 100%;  position: absolute;  top: 0;  left: 0;  align-items: center;  justify-content: center;  display: flex;  border-radius: 40px;  opacity: 0;  font-size: 12px;  z-index: 2;  transition: 0.3s;}#nav-music:hover:not(.playing) #nav-music-hoverTips {  opacity: 1;}#nav-music  .aplayer  .aplayer-info  .aplayer-controller  .aplayer-bar-wrap:hover  .aplayer-bar  .aplayer-played  .aplayer-thumb {  display: none;}#nav-music .aplayer {  background: var(--card-bg);  border-radius: 60px;  height: 41px;  display: flex;  margin: 0;  transition: 0.3s;  border: var(--style-border);  box-shadow: none;}#nav-music.playing .aplayer {  background: var(--anzhiyu-main-op-deep);  border: var(--style-border-hover);  backdrop-filter: saturate(180%) blur(20px);  backdrop-filter: blur(20px);}#nav-music .aplayer .aplayer-notice {  display: none;}#nav-music .aplayer .aplayer-miniswitcher {  display: none;}#nav-music .aplayer .aplayer-body {  position: relative;  display: flex;  align-items: center;}#nav-music .aplayer-list {  display: none;}#nav-music .aplayer .aplayer-info .aplayer-music {  margin: 0;  display: flex;  align-items: center;  padding: 0 12px 0 8px;  cursor: pointer;  z-index: 1;  height: 100%;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-time {  display: none;}#nav-music .aplayer .aplayer-info .aplayer-music .aplayer-author {  display: none;}#nav-music .aplayer.aplayer-withlist .aplayer-info {  border: none;}#nav-music .aplayer .aplayer-pic .aplayer-button {  bottom: 50%;  right: 50%;  transform: translate(50%, 50%);  margin: 0;  transition: 0.3s;}#nav-music .aplayer .aplayer-pic:has(.aplayer-button.aplayer-play) {  animation-play-state: paused;  transform: rotate(0deg) scale(1) !important;}#nav-music .aplayer.aplayer-withlrc .aplayer-pic {  margin-left: 8px;}#nav-music .aplayer .aplayer-info .aplayer-music .aplayer-title {  cursor: pointer;  line-height: 1;  display: inline-block;  white-space: nowrap;  max-width: 120px;  overflow: hidden;  text-overflow: ellipsis;  transition: 0.3s;  user-select: none;}#nav-music .aplayer .aplayer-info .aplayer-controller {  position: absolute;  width: 100%;  height: 100%;  top: 0;  left: 0;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap {  margin: 0;  padding: 0;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar {  height: 100%;  background: none;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded {  display: none;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played {  height: 100%;  opacity: 0.1;  background-color: var(--anzhiyu-white) !important;  animation: lightBar 5s ease infinite;  animation-play-state: paused;}#nav-music.playing .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played {  animation-play-state: running;}@keyframes lightBar {  0% {    opacity: 0.1;  }  60% {    opacity: 0.3;  }  100% {    opacity: 0.1;  }}/* 歌词 */#nav-music .aplayer.aplayer-withlrc .aplayer-lrc {  width: 0;  opacity: 0;  transition: 0.3s;  margin-top: -2px;  padding: 5px 0;}#nav-music.stretch .aplayer.aplayer-withlrc .aplayer-lrc {  margin-left: 8px;}#nav-music.stretch .aplayer.aplayer-withlrc .aplayer-lrc {  width: 200px;  margin-bottom: 0;  opacity: 1;}#nav-music .aplayer .aplayer-lrc p.aplayer-lrc-current {  color: var(--anzhiyu-white);  border: none;}#nav-music .aplayer .aplayer-lrc:after,#nav-music .aplayer .aplayer-lrc:before {  display: none;}#nav-music .aplayer .aplayer-lrc p {  color: #ffffffb3;}#nav-music .aplayer .aplayer-pic {  pointer-events: none;}#nav-music .aplayer .aplayer-pic .aplayer-button {  pointer-events: all;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/Meting2.min.js"/>
      <url>/js/Meting2.min.js</url>
      
        <content type="html"><![CDATA["use strict";function _objectSpread(a) {  for (var b = 1; b < arguments.length; b++) {    var c = null == arguments[b] ? {} : arguments[b],      d = Object.keys(c);    "function" == typeof Object.getOwnPropertySymbols &&      (d = d.concat(        Object.getOwnPropertySymbols(c).filter(function (a) {          return Object.getOwnPropertyDescriptor(c, a).enumerable;        })      )),      d.forEach(function (b) {        _defineProperty(a, b, c[b]);      });  }  return a;}function _defineProperty(a, b, c) {  return (    b in a      ? Object.defineProperty(a, b, {          value: c,          enumerable: !0,          configurable: !0,          writable: !0,        })      : (a[b] = c),    a  );}class MetingJSElement extends HTMLElement {  connectedCallback() {    window.APlayer && window.fetch && (this._init(), this._parse());  }  disconnectedCallback() {    this.lock || this.aplayer.destroy();  }  _camelize(a) {    return a      .replace(/^[_.\- ]+/, "")      .toLowerCase()      .replace(/[_.\- ]+(\w|$)/g, (a, b) => b.toUpperCase());  }  _init() {    let a = {};    for (let b = 0; b < this.attributes.length; b += 1)      a[this._camelize(this.attributes[b].name)] = this.attributes[b].value;    let b = [      "server",      "type",      "id",      "api",      "auth",      "auto",      "lock",      "name",      "title",      "artist",      "author",      "url",      "cover",      "pic",      "lyric",      "lrc",    ];    this.meta = {};    for (var c = 0; c < b.length; c++) {      let d = b[c];      (this.meta[d] = a[d]), delete a[d];    }    (this.config = a),      (this.api =        this.meta.api ||        window.meting_api ||        "https://meting.zhheo.com/?server=:server&type=:type&id=:id&auth=:auth&r=:r"),      this.meta.auto && this._parse_link();  }  _parse_link() {    let a = [      ["music.163.com.*song.*id=(\\d+)", "netease", "song"],      ["music.163.com.*album.*id=(\\d+)", "netease", "album"],      ["music.163.com.*artist.*id=(\\d+)", "netease", "artist"],      ["music.163.com.*playlist.*id=(\\d+)", "netease", "playlist"],      ["music.163.com.*discover/toplist.*id=(\\d+)", "netease", "playlist"],      ["y.qq.com.*song/(\\w+).html", "tencent", "song"],      ["y.qq.com.*album/(\\w+).html", "tencent", "album"],      ["y.qq.com.*singer/(\\w+).html", "tencent", "artist"],      ["y.qq.com.*playsquare/(\\w+).html", "tencent", "playlist"],      ["y.qq.com.*playlist/(\\w+).html", "tencent", "playlist"],      ["xiami.com.*song/(\\w+)", "xiami", "song"],      ["xiami.com.*album/(\\w+)", "xiami", "album"],      ["xiami.com.*artist/(\\w+)", "xiami", "artist"],      ["xiami.com.*collect/(\\w+)", "xiami", "playlist"],    ];    for (var b = 0; b < a.length; b++) {      let c = a[b],        d = new RegExp(c[0]),        e = d.exec(this.meta.auto);      if (null !== e)        return (          (this.meta.server = c[1]),          (this.meta.type = c[2]),          void (this.meta.id = e[1])        );    }  }  _parse() {    if (this.meta.url) {      let a = {        name: this.meta.name || this.meta.title || "Audio name",        artist: this.meta.artist || this.meta.author || "Audio artist",        url: this.meta.url,        cover: this.meta.cover || this.meta.pic,        lrc: this.meta.lrc || this.meta.lyric || "",        type: this.meta.type || "auto",      };      return (        a.lrc || (this.meta.lrcType = 0),        this.innerText && ((a.lrc = this.innerText), (this.meta.lrcType = 2)),        void this._loadPlayer([a])      );    }    let a = this.api      .replace(":server", this.meta.server)      .replace(":type", this.meta.type)      .replace(":id", this.meta.id)      .replace(":auth", this.meta.auth)      .replace(":r", Math.random());    fetch(a)      .then((a) => a.json())      .then((a) => this._loadPlayer(a));  }  _loadPlayer(a) {    let b = {      audio: a,      mutex: !0,      lrcType: this.meta.lrcType || 3,      storageName: "metingjs",    };    if (a.length) {      let a = _objectSpread({}, b, this.config);      for (let b in a)        ("true" === a[b] || "false" === a[b]) && (a[b] = "true" === a[b]);      let c = document.createElement("div");      (a.container = c), this.appendChild(c), (this.aplayer = new APlayer(a));    }  }}console.log(  "\n %c MetingJS v2.0.1 %c https://github.com/metowolf/MetingJS \n",  "color: #fadfa3; background: #030307; padding:5px 0;",  "background: #fadfa3; padding:5px 0;"),  window.customElements &&    !window.customElements.get("meting-js") &&    ((window.MetingJSElement = MetingJSElement),    window.customElements.define("meting-js", MetingJSElement));]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  /* #footer {    background: transparent !important;  } */    /* 头图透明 */  /* #page-header {    background: transparent !important;  } */    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyuOnlyOne.js"/>
      <url>/js/anzhiyuOnlyOne.js</url>
      
        <content type="html"><![CDATA[var anzhiyu_musicPlaying = false;var anzhiyu_musicFirst = false;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu.js"/>
      <url>/js/anzhiyu.js</url>
      
        <content type="html"><![CDATA[var navMusicEl = document.getElementById("nav-music");var anzhiyu_musicball = {  //切换音乐播放状态  musicToggle: function (changePaly = true) {    if (!anzhiyu_musicFirst) {      musicBindEvent();      anzhiyu_musicFirst = true;    }    let msgPlay = '<i class="fa-solid fa-play"></i><span>播放音乐</span>'; // 此處可以更改為你想要顯示的文字    let msgPause = '<i class="fa-solid fa-pause"></i><span>暂停音乐</span>'; // 同上，但兩處均不建議更改    if (anzhiyu_musicPlaying) {      navMusicEl.classList.remove("playing");      // 修改右键菜单文案为播放      // document.getElementById("menu-music-toggle").innerHTML = msgPlay;      document.getElementById("nav-music-hoverTips").innerHTML = "音乐已暂停";      // document.querySelector("#consoleMusic").classList.remove("on");      anzhiyu_musicPlaying = false;      navMusicEl.classList.remove("stretch");    } else {      navMusicEl.classList.add("playing");      // 修改右键菜单文案为暂停      // document.getElementById("menu-music-toggle").innerHTML = msgPause;      // document.querySelector("#consoleMusic").classList.add("on");      anzhiyu_musicPlaying = true;      navMusicEl.classList.add("stretch");    }    if (changePaly) document.querySelector("#nav-music meting-js").aplayer.toggle();  },  // 音乐伸缩  musicTelescopic: function () {    if (navMusicEl.classList.contains("stretch")) {      navMusicEl.classList.remove("stretch");    } else {      navMusicEl.classList.add("stretch");    }  },  //音乐上一曲  musicSkipBack: function () {    document.querySelector("#nav-music meting-js").aplayer.skipBack();  },  //音乐下一曲  musicSkipForward: function () {    document.querySelector("#nav-music meting-js").aplayer.skipForward();  },  //获取音乐中的名称  musicGetName: function () {    var x = $(".aplayer-title");    var arr = [];    for (var i = x.length - 1; i >= 0; i--) {      arr[i] = x[i].innerText;    }    return arr[0];  },};// 如果有右键事件 可以在这里写。// addRightMenuClickEvent();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>即刻短文</title>
      <link href="/essay/index.html"/>
      <url>/essay/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/music_main.js"/>
      <url>/js/music_main.js</url>
      
        <content type="html"><![CDATA[// 调用anzhiyu.changeMusicBg(false);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyufunction.js"/>
      <url>/js/anzhiyufunction.js</url>
      
        <content type="html"><![CDATA[// 音乐绑定事件function musicBindEvent() {    document.querySelector("#nav-music .aplayer-music").addEventListener("click", function () {      anzhiyu_musicball.musicTelescopic();    });    document.querySelector("#nav-music .aplayer-button").addEventListener("click", function () {      anzhiyu_musicball.musicToggle(false);    });  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/APlayer.min.js"/>
      <url>/js/APlayer.min.js</url>
      
        <content type="html"><![CDATA[!function (e, t) {  "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("APlayer", [], t) : "object" == typeof exports ? exports.APlayer = t() : e.APlayer = t()}(window, function () {  return function (e) {    var t = {};    function n(i) {      if (t[i]) return t[i].exports;      var a = t[i] = {        i: i,        l: !1,        exports: {}      };      return e[i].call(a.exports, a, a.exports, n), a.l = !0, a.exports    }    return n.m = e, n.c = t, n.d = function (e, t, i) {      n.o(e, t) || Object.defineProperty(e, t, {        configurable: !1,        enumerable: !0,        get: i      })    }, n.r = function (e) {      Object.defineProperty(e, "__esModule", {        value: !0      })    }, n.n = function (e) {      var t = e && e.__esModule ? function () {        return e.default      } : function () {        return e      };      return n.d(t, "a", t), t    }, n.o = function (e, t) {      return Object.prototype.hasOwnProperty.call(e, t)    }, n.p = "/", n(n.s = 41)  }([function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = /mobile/i.test(window.navigator.userAgent),      a = {        secondToTime: function (e) {          var t = Math.floor(e / 3600),            n = Math.floor((e - 3600 * t) / 60),            i = Math.floor(e - 3600 * t - 60 * n);          return (t > 0 ? [t, n, i] : [n, i]).map(function (e) {            return e < 10 ? "0" + e : "" + e          }).join(":")        },        getElementViewLeft: function (e) {          var t = e.offsetLeft,            n = e.offsetParent,            i = document.body.scrollLeft + document.documentElement.scrollLeft;          if (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement)            for (; null !== n && n !== e;) t += n.offsetLeft, n = n.offsetParent;          else            for (; null !== n;) t += n.offsetLeft, n = n.offsetParent;          return t - i        },        getElementViewTop: function (e, t) {          for (var n, i = e.offsetTop, a = e.offsetParent; null !== a;) i += a.offsetTop, a = a.offsetParent;          return n = document.body.scrollTop + document.documentElement.scrollTop, t ? i : i - n        },        isMobile: i,        storage: {          set: function (e, t) {            localStorage.setItem(e, t)          },          get: function (e) {            return localStorage.getItem(e)          }        },        nameMap: {          dragStart: i ? "touchstart" : "mousedown",          dragMove: i ? "touchmove" : "mousemove",          dragEnd: i ? "touchend" : "mouseup"        },        randomOrder: function (e) {          return function (e) {            for (var t = e.length - 1; t >= 0; t--) {              var n = Math.floor(Math.random() * (t + 1)),                i = e[n];              e[n] = e[t], e[t] = i            }            return e          }([].concat(function (e) {            if (Array.isArray(e)) {              for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];              return n            }            return Array.from(e)          }(Array(e))).map(function (e, t) {            return t          }))        }      };    t.default = a  }, function (e, t, n) {    var i = n(2);    e.exports = function (e) {      "use strict";      e = e || {};      var t = "",        n = i.$each,        a = e.audio,        r = (e.$value, e.$index, i.$escape),        o = e.theme,        s = e.index;      return n(a, function (e, n) {        t += '\n<li>\n    <span class="aplayer-list-cur" style="background-color: ', t += r(e.theme || o), t += ';"></span>\n    <span class="aplayer-list-index">', t += r(n + s), t += '</span>\n    <span class="aplayer-list-title">', t += r(e.name), t += '</span>\n    <span class="aplayer-list-author">', t += r(e.artist), t += "</span>\n</li>\n"      }), t    }  }, function (e, t, n) {    "use strict";    e.exports = n(15)  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = g(n(33)),      a = g(n(32)),      r = g(n(31)),      o = g(n(30)),      s = g(n(29)),      l = g(n(28)),      u = g(n(27)),      c = g(n(26)),      p = g(n(25)),      d = g(n(24)),      h = g(n(23)),      y = g(n(22)),      f = g(n(21)),      v = g(n(20)),      m = g(n(19));    function g(e) {      return e && e.__esModule ? e : {        default: e      }    }    var w = {      play: i.default,      pause: a.default,      volumeUp: r.default,      volumeDown: o.default,      volumeOff: s.default,      orderRandom: l.default,      orderList: u.default,      menu: c.default,      loopAll: p.default,      loopOne: d.default,      loopNone: h.default,      loading: y.default,      right: f.default,      skip: v.default,      lrc: m.default    };    t.default = w  }, function (e, t, n) {    "use strict";    var i, a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {      return typeof e    } : function (e) {      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e    };    i = function () {      return this    }();    try {      i = i || Function("return this")() || (0, eval)("this")    } catch (e) {      "object" === ("undefined" == typeof window ? "undefined" : a(window)) && (i = window)    }    e.exports = i  }, function (e, t, n) {    "use strict";    var i, a, r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {      return typeof e    } : function (e) {      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e    };    void 0 === (a = "function" == typeof (i = function () {      if ("object" === ("undefined" == typeof window ? "undefined" : r(window)) && void 0 !== document.querySelectorAll && void 0 !== window.pageYOffset && void 0 !== history.pushState) {        var e = function (e, t, n, i) {            return n > i ? t : e + (t - e) * ((a = n / i) < .5 ? 4 * a * a * a : (a - 1) * (2 * a - 2) * (2 * a - 2) + 1);            var a          },          t = function (t, n, i, a) {            n = n || 500;            var r = (a = a || window).scrollTop || window.pageYOffset;            if ("number" == typeof t) var o = parseInt(t);            else var o = function (e, t) {              return "HTML" === e.nodeName ? -t : e.getBoundingClientRect().top + t            }(t, r);            var s = Date.now(),              l = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (e) {                window.setTimeout(e, 15)              };            ! function u() {              var c = Date.now() - s;              a !== window ? a.scrollTop = e(r, o, c, n) : window.scroll(0, e(r, o, c, n)), c > n ? "function" == typeof i && i(t) : l(u)            }()          },          n = function (e) {            if (!e.defaultPrevented) {              e.preventDefault(), location.hash !== this.hash && window.history.pushState(null, null, this.hash);              var n = document.getElementById(this.hash.substring(1));              if (!n) return;              t(n, 500, function (e) {                location.replace("#" + e.id)              })            }          };        return document.addEventListener("DOMContentLoaded", function () {          for (var e, t = document.querySelectorAll('a[href^="#"]:not([href="#"])'), i = t.length; e = t[--i];) e.addEventListener("click", n, !1)        }), t      }    }) ? i.call(t, n, t, e) : i) || (e.exports = a)  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = function () {        function e(e, t) {          for (var n = 0; n < t.length; n++) {            var i = t[n];            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)          }        }        return function (t, n, i) {          return n && e(t.prototype, n), i && e(t, i), t        }      }(),      a = s(n(1)),      r = s(n(0)),      o = s(n(5));    function s(e) {      return e && e.__esModule ? e : {        default: e      }    }    var l = function () {      function e(t) {        ! function (e, t) {          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")        }(this, e), this.player = t, this.index = 0, this.audios = this.player.options.audio, this.bindEvents()      }      return i(e, [{        key: "bindEvents",        value: function () {          var e = this;          this.player.template.list.addEventListener("click", function (t) {            var n = void 0;            n = "LI" === t.target.tagName.toUpperCase() ? t.target : t.target.parentElement;            var i = parseInt(n.getElementsByClassName("aplayer-list-index")[0].innerHTML) - 1;            i !== e.index ? (e.switch(i), e.player.play()) : e.player.toggle()          })        }      }, {        key: "show",        value: function () {          this.player.events.trigger("listshow"), this.player.template.list.classList.remove("aplayer-list-hide"), this.player.template.listOl.scrollTop = 33 * this.index        }      }, {        key: "hide",        value: function () {          this.player.events.trigger("listhide"), this.player.template.list.classList.add("aplayer-list-hide")        }      }, {        key: "toggle",        value: function () {          this.player.template.list.classList.contains("aplayer-list-hide") ? this.show() : this.hide()        }      }, {        key: "add",        value: function (e) {          this.player.events.trigger("listadd", {            audios: e          }), "[object Array]" !== Object.prototype.toString.call(e) && (e = [e]), e.map(function (e) {            return e.name = e.name || e.title || "Audio name", e.artist = e.artist || e.author || "Audio artist", e.cover = e.cover || e.pic, e.type = e.type || "normal", e          });          var t = !(this.audios.length > 1),            n = 0 === this.audios.length;          this.player.template.listOl.innerHTML += (0, a.default)({            theme: this.player.options.theme,            audio: e,            index: this.audios.length + 1          }), this.audios = this.audios.concat(e), t && this.audios.length > 1 && this.player.container.classList.add("aplayer-withlist"), this.player.randomOrder = r.default.randomOrder(this.audios.length), this.player.template.listCurs = this.player.container.querySelectorAll(".aplayer-list-cur"), this.player.template.listCurs[this.audios.length - 1].style.backgroundColor = e.theme || this.player.options.theme, n && ("random" === this.player.options.order ? this.switch(this.player.randomOrder[0]) : this.switch(0))        }      }, {        key: "remove",        value: function (e) {          if (this.player.events.trigger("listremove", {              index: e            }), this.audios[e])            if (this.audios.length > 1) {              var t = this.player.container.querySelectorAll(".aplayer-list li");              t[e].remove(), this.audios.splice(e, 1), this.player.lrc && this.player.lrc.remove(e), e === this.index && (this.audios[e] ? this.switch(e) : this.switch(e - 1)), this.index > e && this.index--;              for (var n = e; n < t.length; n++) t[n].getElementsByClassName("aplayer-list-index")[0].textContent = n;              1 === this.audios.length && this.player.container.classList.remove("aplayer-withlist"), this.player.template.listCurs = this.player.container.querySelectorAll(".aplayer-list-cur")            } else this.clear()        }      }, {        key: "switch",        value: function (e) {          if (this.player.events.trigger("listswitch", {              index: e            }), void 0 !== e && this.audios[e]) {            this.index = e;            var t = this.audios[this.index];            this.player.template.pic.style.backgroundImage = t.cover ? "url('" + t.cover + "')" : "", this.player.theme(this.audios[this.index].theme || this.player.options.theme, this.index, !1), this.player.template.title.innerHTML = t.name, this.player.template.author.innerHTML = t.artist ? " - " + t.artist : "";            var n = this.player.container.getElementsByClassName("aplayer-list-light")[0];            n && n.classList.remove("aplayer-list-light"), this.player.container.querySelectorAll(".aplayer-list li")[this.index].classList.add("aplayer-list-light"), (0, o.default)(33 * this.index, 500, null, this.player.template.listOl), this.player.setAudio(t), this.player.lrc && this.player.lrc.switch(this.index), this.player.lrc && this.player.lrc.update(0), 1 !== this.player.duration && (this.player.template.dtime.innerHTML = r.default.secondToTime(this.player.duration))          }        }      }, {        key: "clear",        value: function () {          this.player.events.trigger("listclear"), this.index = 0, this.player.container.classList.remove("aplayer-withlist"), this.player.pause(), this.audios = [], this.player.lrc && this.player.lrc.clear(), this.player.audio.src = "", this.player.template.listOl.innerHTML = "", this.player.template.pic.style.backgroundImage = "", this.player.theme(this.player.options.theme, this.index, !1), this.player.template.title.innerHTML = "No audio", this.player.template.author.innerHTML = "", this.player.bar.set("loaded", 0, "width"), this.player.template.dtime.innerHTML = r.default.secondToTime(0)        }      }]), e    }();    t.default = l  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = function () {      function e(e, t) {        for (var n = 0; n < t.length; n++) {          var i = t[n];          i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)        }      }      return function (t, n, i) {        return n && e(t.prototype, n), i && e(t, i), t      }    }();    var a = function () {      function e() {        ! function (e, t) {          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")        }(this, e), this.events = {}, this.audioEvents = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "mozaudioavailable", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], this.playerEvents = ["destroy", "listshow", "listhide", "listadd", "listremove", "listswitch", "listclear", "noticeshow", "noticehide", "lrcshow", "lrchide"]      }      return i(e, [{        key: "on",        value: function (e, t) {          this.type(e) && "function" == typeof t && (this.events[e] || (this.events[e] = []), this.events[e].push(t))        }      }, {        key: "trigger",        value: function (e, t) {          if (this.events[e] && this.events[e].length)            for (var n = 0; n < this.events[e].length; n++) this.events[e][n](t)        }      }, {        key: "type",        value: function (e) {          return -1 !== this.playerEvents.indexOf(e) ? "player" : -1 !== this.audioEvents.indexOf(e) ? "audio" : (console.error("Unknown event name: " + e), null)        }      }]), e    }();    t.default = a  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = function () {      function e(e, t) {        for (var n = 0; n < t.length; n++) {          var i = t[n];          i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)        }      }      return function (t, n, i) {        return n && e(t.prototype, n), i && e(t, i), t      }    }();    var a = function () {      function e(t) {        ! function (e, t) {          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")        }(this, e), this.player = t, window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {          window.setTimeout(e, 1e3 / 60)        }, this.types = ["loading"], this.init()      }      return i(e, [{        key: "init",        value: function () {          var e = this;          this.types.forEach(function (t) {            e["init" + t + "Checker"]()          })        }      }, {        key: "initloadingChecker",        value: function () {          var e = this,            t = 0,            n = 0,            i = !1;          this.loadingChecker = setInterval(function () {            e.enableloadingChecker && (n = e.player.audio.currentTime, i || n !== t || e.player.audio.paused || (e.player.container.classList.add("aplayer-loading"), i = !0), i && n > t && !e.player.audio.paused && (e.player.container.classList.remove("aplayer-loading"), i = !1), t = n)          }, 100)        }      }, {        key: "enable",        value: function (e) {          this["enable" + e + "Checker"] = !0, "fps" === e && this.initfpsChecker()        }      }, {        key: "disable",        value: function (e) {          this["enable" + e + "Checker"] = !1        }      }, {        key: "destroy",        value: function () {          var e = this;          this.types.forEach(function (t) {            e["enable" + t + "Checker"] = !1, e[t + "Checker"] && clearInterval(e[t + "Checker"])          })        }      }]), e    }();    t.default = a  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = function () {        function e(e, t) {          for (var n = 0; n < t.length; n++) {            var i = t[n];            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)          }        }        return function (t, n, i) {          return n && e(t.prototype, n), i && e(t, i), t        }      }(),      a = o(n(0)),      r = o(n(3));    function o(e) {      return e && e.__esModule ? e : {        default: e      }    }    var s = function () {      function e(t) {        ! function (e, t) {          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")        }(this, e), this.player = t, this.initPlayButton(), this.initPlayBar(), this.initOrderButton(), this.initLoopButton(), this.initMenuButton(), a.default.isMobile || this.initVolumeButton(), this.initMiniSwitcher(), this.initSkipButton(), this.initLrcButton()      }      return i(e, [{        key: "initPlayButton",        value: function () {          var e = this;          this.player.template.pic.addEventListener("click", function () {            e.player.toggle()          })        }      }, {        key: "initPlayBar",        value: function () {          var e = this,            t = function (t) {              var n = ((t.clientX || t.changedTouches[0].clientX) - a.default.getElementViewLeft(e.player.template.barWrap)) / e.player.template.barWrap.clientWidth;              n = Math.max(n, 0), n = Math.min(n, 1), e.player.bar.set("played", n, "width"), e.player.lrc && e.player.lrc.update(n * e.player.duration), e.player.template.ptime.innerHTML = a.default.secondToTime(n * e.player.duration)            },            n = function n(i) {              document.removeEventListener(a.default.nameMap.dragEnd, n), document.removeEventListener(a.default.nameMap.dragMove, t);              var r = ((i.clientX || i.changedTouches[0].clientX) - a.default.getElementViewLeft(e.player.template.barWrap)) / e.player.template.barWrap.clientWidth;              r = Math.max(r, 0), r = Math.min(r, 1), e.player.bar.set("played", r, "width"), e.player.seek(e.player.bar.get("played", "width") * e.player.duration), e.player.disableTimeupdate = !1            };          this.player.template.barWrap.addEventListener(a.default.nameMap.dragStart, function () {            e.player.disableTimeupdate = !0, document.addEventListener(a.default.nameMap.dragMove, t), document.addEventListener(a.default.nameMap.dragEnd, n)          })        }      }, {        key: "initVolumeButton",        value: function () {          var e = this;          this.player.template.volumeButton.addEventListener("click", function () {            e.player.audio.muted ? (e.player.audio.muted = !1, e.player.switchVolumeIcon(), e.player.bar.set("volume", e.player.volume(), "height")) : (e.player.audio.muted = !0, e.player.switchVolumeIcon(), e.player.bar.set("volume", 0, "height"))          });          var t = function (t) {              var n = 1 - ((t.clientY || t.changedTouches[0].clientY) - a.default.getElementViewTop(e.player.template.volumeBar, e.player.options.fixed)) / e.player.template.volumeBar.clientHeight;              n = Math.max(n, 0), n = Math.min(n, 1), e.player.volume(n)            },            n = function n(i) {              e.player.template.volumeBarWrap.classList.remove("aplayer-volume-bar-wrap-active"), document.removeEventListener(a.default.nameMap.dragEnd, n), document.removeEventListener(a.default.nameMap.dragMove, t);              var r = 1 - ((i.clientY || i.changedTouches[0].clientY) - a.default.getElementViewTop(e.player.template.volumeBar, e.player.options.fixed)) / e.player.template.volumeBar.clientHeight;              r = Math.max(r, 0), r = Math.min(r, 1), e.player.volume(r)            };          this.player.template.volumeBarWrap.addEventListener(a.default.nameMap.dragStart, function () {            e.player.template.volumeBarWrap.classList.add("aplayer-volume-bar-wrap-active"), document.addEventListener(a.default.nameMap.dragMove, t), document.addEventListener(a.default.nameMap.dragEnd, n)          })        }      }, {        key: "initOrderButton",        value: function () {          var e = this;          this.player.template.order.addEventListener("click", function () {            "list" === e.player.options.order ? (e.player.options.order = "random", e.player.template.order.innerHTML = r.default.orderRandom) : "random" === e.player.options.order && (e.player.options.order = "list", e.player.template.order.innerHTML = r.default.orderList)          })        }      }, {        key: "initLoopButton",        value: function () {          var e = this;          this.player.template.loop.addEventListener("click", function () {            e.player.list.audios.length > 1 ? "one" === e.player.options.loop ? (e.player.options.loop = "none", e.player.template.loop.innerHTML = r.default.loopNone) : "none" === e.player.options.loop ? (e.player.options.loop = "all", e.player.template.loop.innerHTML = r.default.loopAll) : "all" === e.player.options.loop && (e.player.options.loop = "one", e.player.template.loop.innerHTML = r.default.loopOne) : "one" === e.player.options.loop || "all" === e.player.options.loop ? (e.player.options.loop = "none", e.player.template.loop.innerHTML = r.default.loopNone) : "none" === e.player.options.loop && (e.player.options.loop = "all", e.player.template.loop.innerHTML = r.default.loopAll)          })        }      }, {        key: "initMenuButton",        value: function () {          var e = this;          this.player.template.menu.addEventListener("click", function () {            e.player.list.toggle()          });          document.querySelector(".aplayer-lrc").addEventListener("click", function() {            e.player.list.toggle()          });                  }      }, {        key: "initMiniSwitcher",        value: function () {          var e = this;          this.player.template.miniSwitcher.addEventListener("click", function () {            e.player.setMode("mini" === e.player.mode ? "normal" : "mini")          })        }      }, {        key: "initSkipButton",        value: function () {          var e = this;          this.player.template.skipBackButton.addEventListener("click", function () {            e.player.skipBack()          }), this.player.template.skipForwardButton.addEventListener("click", function () {            e.player.skipForward()          }), this.player.template.skipPlayButton.addEventListener("click", function () {            e.player.toggle()          })        }      }, {        key: "initLrcButton",        value: function () {          var e = this;          this.player.template.lrcButton.addEventListener("click", function () {            e.player.template.lrcButton.classList.contains("aplayer-icon-lrc-inactivity") ? (e.player.template.lrcButton.classList.remove("aplayer-icon-lrc-inactivity"), e.player.lrc && e.player.lrc.show()) : (e.player.template.lrcButton.classList.add("aplayer-icon-lrc-inactivity"), e.player.lrc && e.player.lrc.hide())          })        }      }]), e    }();    t.default = s  }, function (e, t, n) {    var i = n(2);    e.exports = function (e) {      "use strict";      e = e || {};      var t = "",        n = i.$each,        a = e.lyrics,        r = (e.$value, e.$index, i.$escape);      return n(a, function (e, n) {        t += "\n    <p", 0="==" n && (t +=" class="aplayer-lrc-current"" ), t , ; }), } }, function (e, t, n) { "use strict"; object.defineproperty(t, "__esmodule", value: !0 }); var i, a="function" () e(e, t) for (var < t.length; n++) i="t[n];" i.enumerable="i.enumerable" || !1, i.configurable="!0," "value" in (i.writable="!0)," object.defineproperty(e, i.key, i) return (t, n, e(t.prototype, n), e(t, i), }(), r="n(10)," o="(i" = r) i.__esmodule ? : default: }; s="function" e(t) ! if (!(e instanceof t)) throw new typeerror("cannot call class as function") }(this, e), this.container="t.container," this.async="t.async," this.player="t.player," this.parsed="[]," this.index="0," this.current="[]" a(e, [{ key: "show", this.player.events.trigger("lrcshow"), this.player.template.lrcwrap.classlist.remove("aplayer-lrc-hide") "hide", this.player.events.trigger("lrchide"), this.player.template.lrcwrap.classlist.add("aplayer-lrc-hide") "toggle", this.player.template.lrcwrap.classlist.contains("aplayer-lrc-hide") this.show() this.hide() "update", e="arguments.length"> 0 && void 0 !== arguments[0] ? arguments[0] : this.player.audio.currentTime;          if (this.index > this.current.length - 1 || e < this.current[this.index][0] || !this.current[this.index + 1] || e >= this.current[this.index + 1][0])            for (var t = 0; t < this.current.length; t++) e >= this.current[t][0] && (!this.current[t + 1] || e < this.current[t + 1][0]) && (this.index = t, this.container.style.transform = "translateY(" + 80 * -this.index + "px)", this.container.style.webkitTransform = "translateY(" + 80 * -this.index + "px)", this.container.getElementsByClassName("aplayer-lrc-current")[0].classList.remove("aplayer-lrc-current"), this.container.getElementsByTagName("p")[t].classList.add("aplayer-lrc-current"))        }      }, {        key: "switch",        value: function (e) {          var t = this;          if (!this.parsed[e])            if (this.async) {              this.parsed[e] = [                ["00:00", "Loading"]              ];              var n = new XMLHttpRequest;              n.onreadystatechange = function () {                e === t.player.list.index && 4 === n.readyState && (n.status >= 200 && n.status < 300 || 304 === n.status ? t.parsed[e] = t.parse(n.responseText) : (t.player.notice("LRC file request fails: status " + n.status), t.parsed[e] = [                  ["00:00", "Not available"]                ]), t.container.innerHTML = (0, o.default)({                  lyrics: t.parsed[e]                }), t.update(0), t.current = t.parsed[e])              };              var i = this.player.list.audios[e].lrc;              n.open("get", i, !0), n.send(null)            } else this.player.list.audios[e].lrc ? this.parsed[e] = this.parse(this.player.list.audios[e].lrc) : this.parsed[e] = [              ["00:00", "Not available"]            ];          this.container.innerHTML = (0, o.default)({            lyrics: this.parsed[e]          }), this.update(0), this.current = this.parsed[e]        }      }, {        key: "parse",        value: function (e) {          if (e) {            for (var t = (e = e.replace(/([^\]^\n])\[/g, function (e, t) {                return t + "\n["              })).split("\n"), n = [], i = t.length, a = 0; a < i; a++) {              var r = t[a].match(/\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/g),                o = t[a].replace(/.*\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/g, "").replace(/<(\d{2}):(\d{2})(\.(\d{2,3}))?>/g, "").replace(/^\s+|\s+$/g, "");              if (r)                for (var s = r.length, l = 0; l < s; l++) {                  var u = /\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/.exec(r[l]),                    c = 60 * u[1] + parseInt(u[2]) + (u[4] ? parseInt(u[4]) / (2 === (u[4] + "").length ? 100 : 1e3) : 0);                  n.push([c, o])                }            }            return (n = n.filter(function (e) {              return e[1]            })).sort(function (e, t) {              return e[0] - t[0]            }), n          }          return []        }      }, {        key: "remove",        value: function (e) {          this.parsed.splice(e, 1)        }      }, {        key: "clear",        value: function () {          this.parsed = [], this.container.innerHTML = ""        }      }]), e    }();    t.default = s  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i, a = function () {        function e(e, t) {          for (var n = 0; n < t.length; n++) {            var i = t[n];            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)          }        }        return function (t, n, i) {          return n && e(t.prototype, n), i && e(t, i), t        }      }(),      r = n(0),      o = (i = r) && i.__esModule ? i : {        default: i      };    var s = function () {      function e(t) {        ! function (e, t) {          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")        }(this, e), this.storageName = t.options.storageName, this.data = JSON.parse(o.default.storage.get(this.storageName)), this.data || (this.data = {}), this.data.volume = this.data.volume || t.options.volume      }      return a(e, [{        key: "get",        value: function (e) {          return this.data[e]        }      }, {        key: "set",        value: function (e, t) {          this.data[e] = t, o.default.storage.set(this.storageName, JSON.stringify(this.data))        }      }]), e    }();    t.default = s  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = function () {      function e(e, t) {        for (var n = 0; n < t.length; n++) {          var i = t[n];          i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)        }      }      return function (t, n, i) {        return n && e(t.prototype, n), i && e(t, i), t      }    }();    var a = function () {      function e(t) {        ! function (e, t) {          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")        }(this, e), this.elements = {}, this.elements.volume = t.volume, this.elements.played = t.played, this.elements.loaded = t.loaded      }      return i(e, [{        key: "set",        value: function (e, t, n) {          t = Math.max(t, 0), t = Math.min(t, 1), this.elements[e].style[n] = 100 * t + "%"        }      }, {        key: "get",        value: function (e, t) {          return parseFloat(this.elements[e].style[t]) / 100        }      }]), e    }();    t.default = a  }, function (e, t, n) {    "use strict";    (function (t) {      e.exports = !1;      try {        e.exports = "[object process]" === Object.prototype.toString.call(t.process)      } catch (e) {}    }).call(this, n(4))  }, function (e, t, n) {    "use strict";    (function (t) {      var i = n(14),        a = Object.create(i ? t : window),        r = /["&'<>]/;      a.$escape = function (e) {        return function (e) {          var t = "" + e,            n = r.exec(t);          if (!n) return e;          var i = "",            a = void 0,            o = void 0,            s = void 0;          for (a = n.index, o = 0; a < t.length; a++) {            switch (t.charCodeAt(a)) {              case 34:                s = "&#34;";                break;              case 38:                s = "&#38;";                break;              case 39:                s = "&#39;";                break;              case 60:                s = "&#60;";                break;              case 62:                s = "&#62;";                break;              default:                continue            }            o !== a && (i += t.substring(o, a)), o = a + 1, i += s          }          return o !== a ? i + t.substring(o, a) : i        }(function e(t) {          "string" != typeof t && (t = void 0 === t || null === t ? "" : "function" == typeof t ? e(t.call(t)) : JSON.stringify(t));          return t        }(e))      }, a.$each = function (e, t) {        if (Array.isArray(e))          for (var n = 0, i = e.length; n < i; n++) t(e[n], n);        else          for (var a in e) t(e[a], a)      }, e.exports = a    }).call(this, n(4))  }, function (e, t, n) {    var i = n(2);    e.exports = function (e) {      "use strict";      var t = "",        a = (e = e || {}).options,        r = e.cover,        o = i.$escape,        s = e.icons,        l = (arguments[1], function (e) {          return t += e        }),        u = e.getObject;      e.theme, e.audio, e.index;      return a.fixed ? (t += '\n<div 1 class="aplayer-list', a.listFolded && (t += " aplayer-list-hide"), t +=""" , a.listmaxheight && (t ), l(n(1)(u({ theme: a.theme, audio: a.audio, index: }))), r "list"="==" a.order ? : "random"="==" "one"="==" a.loop "all"="==" "none"="==" ) a.listfolded } }, function (e, t, n) { "use strict"; object.defineproperty(t, "__esmodule", value: !0 }); var i="function" () e(e, t) for (var n="0;" < t.length; n++) i.enumerable="i.enumerable" || !1, i.configurable="!0," "value" in (i.writable="!0)," object.defineproperty(e, i.key, i) return (t, n, e(t.prototype, n), e(t, i), }(), a="o(n(3))," o(e) e e.__esmodule default: s="function" e(t) ! if (!(e instanceof t)) throw new typeerror("cannot call as function") }(this, e), this.container="t.container," this.options="t.options," this.randomorder="t.randomOrder," this.init() i(e, [{ key: "init", ; this.options.audio.length (e="random" =="=" this.options.order this.options.audio[this.randomorder[0]].cover this.options.audio[0].cover), this.container.innerhtml="(0," r.default)({ options: this.options, icons: a.default, cover: e, getobject: (e) }), this.lrc="this.container.querySelector(".aplayer-lrc-contents")," this.lrcwrap="this.container.querySelector(".aplayer-lrc")," this.ptime="this.container.querySelector(".aplayer-ptime")," this.info="this.container.querySelector(".aplayer-info")," this.time="this.container.querySelector(".aplayer-time")," this.barwrap="this.container.querySelector(".aplayer-bar-wrap")," this.button="this.container.querySelector(".aplayer-button")," this.body="this.container.querySelector(".aplayer-body")," this.list="this.container.querySelector(".aplayer-list")," this.listol="this.container.querySelector(".aplayer-list" ol"), this.listcurs="this.container.querySelectorAll(".aplayer-list-cur")," this.played="this.container.querySelector(".aplayer-played")," this.loaded="this.container.querySelector(".aplayer-loaded")," this.thumb="this.container.querySelector(".aplayer-thumb")," this.volume="this.container.querySelector(".aplayer-volume")," this.volumebar="this.container.querySelector(".aplayer-volume-bar")," this.volumebutton="this.container.querySelector(".aplayer-time" button"), this.volumebarwrap="this.container.querySelector(".aplayer-volume-bar-wrap")," this.loop="this.container.querySelector(".aplayer-icon-loop")," this.order="this.container.querySelector(".aplayer-icon-order")," this.menu="this.container.querySelector(".aplayer-icon-menu")," this.pic="this.container.querySelector(".aplayer-pic")," this.title="this.container.querySelector(".aplayer-title")," this.author="this.container.querySelector(".aplayer-author")," this.dtime="this.container.querySelector(".aplayer-dtime")," this.notice="this.container.querySelector(".aplayer-notice")," this.miniswitcher="this.container.querySelector(".aplayer-miniswitcher")," this.skipbackbutton="this.container.querySelector(".aplayer-icon-back")," this.skipforwardbutton="this.container.querySelector(".aplayer-icon-forward")," this.skipplaybutton="this.container.querySelector(".aplayer-icon-play")," this.lrcbutton="this.container.querySelector(".aplayer-icon-lrc")" }]), }(); t.default="s" container: e.element document.getelementsbyclassname("aplayer")[0], mini: e.narrow e.fixed fixed: autoplay: mutex: !0, lrctype: e.showlrc e.lrc 0, preload: "auto", "#b7daff", loop: "all", order: "list", volume: .7, listfolded: e.fixed, listmaxheight: e.listmaxheight "250px", e.music [], storagename: "aplayer-setting" }; t.hasownproperty(n) !e.hasownproperty(n) (e[n]="t[n]);" "[object array]" object.prototype.tostring.call(e.audio) (e.audio="[e.audio])," e.audio.map(function e.name="e.name" e.title "audio name", e.artist="e.artist" e.author artist", e.cover="e.cover" e.pic, e.type="e.type" "normal", e.audio.length e.loop (e.loop="all" e.exports="<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M26.667 5.333h-21.333c-0 0-0.001 0-0.001 0-1.472 0-2.666 1.194-2.666 2.666 0 0 0 0.001 0 0.001v-0 16c0 0 0 0.001 0 0.001 0 1.472 1.194 2.666 2.666 2.666 0 0 0.001 0 0.001 0h21.333c0 0 0.001 0 0.001 0 1.472 0 2.666-1.194 2.666-2.666 0-0 0-0.001 0-0.001v0-16c0-0 0-0.001 0-0.001 0-1.472-1.194-2.666-2.666-2.666-0 0-0.001 0-0.001 0h0zM5.333 16h5.333v2.667h-5.333v-2.667zM18.667 24h-13.333v-2.667h13.333v2.667zM26.667 24h-5.333v-2.667h5.333v2.667zM26.667 18.667h-13.333v-2.667h13.333v2.667z"></path></svg>" i, a, {}; o() error("settimeout has not been defined") s() error("cleartimeout l(e) (i="==" settimeout) settimeout(e, 0); ((i="==" o !i) try 0) catch (t) i.call(null, i.call(this, }! settimeout cleartimeout u, c="[]," p="!1," d="-1;" h() u (p="!1," u.length c.length y()) y() (!p) t;) (u="c," ++d u[d].run(); (a="==" cleartimeout) cleartimeout(e); ((a="==" !a) a(e) a.call(null, e) a.call(this, }(e) f(e, this.fun="e," this.array="t" v() {} r.nexttick="function" array(arguments.length - 1); (arguments.length> 1)        for (var n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];      c.push(new f(e, t)), 1 !== c.length || p || l(y)    }, f.prototype.run = function () {      this.fun.apply(null, this.array)    }, r.title = "browser", r.browser = !0, r.env = {}, r.argv = [], r.version = "", r.versions = {}, r.on = v, r.addListener = v, r.once = v, r.off = v, r.removeListener = v, r.removeAllListeners = v, r.emit = v, r.prependListener = v, r.prependOnceListener = v, r.listeners = function (e) {      return []    }, r.binding = function (e) {      throw new Error("process.binding is not supported")    }, r.cwd = function () {      return "/"    }, r.chdir = function (e) {      throw new Error("process.chdir is not supported")    }, r.umask = function () {      return 0    }  }, function (e, t, n) {    "use strict";    (function (e, t) {      ! function (e, n) {        if (!e.setImmediate) {          var i, a, r, o, s, l = 1,            u = {},            c = !1,            p = e.document,            d = Object.getPrototypeOf && Object.getPrototypeOf(e);          d = d && d.setTimeout ? d : e, "[object process]" === {}.toString.call(e.process) ? i = function (e) {            t.nextTick(function () {              y(e)            })          } : ! function () {            if (e.postMessage && !e.importScripts) {              var t = !0,                n = e.onmessage;              return e.onmessage = function () {                t = !1              }, e.postMessage("", "*"), e.onmessage = n, t            }          }() ? e.MessageChannel ? ((r = new MessageChannel).port1.onmessage = function (e) {            y(e.data)          }, i = function (e) {            r.port2.postMessage(e)          }) : p && "onreadystatechange" in p.createElement("script") ? (a = p.documentElement, i = function (e) {            var t = p.createElement("script");            t.onreadystatechange = function () {              y(e), t.onreadystatechange = null, a.removeChild(t), t = null            }, a.appendChild(t)          }) : i = function (e) {            setTimeout(y, 0, e)          } : (o = "setImmediate$" + Math.random() + "$", s = function (t) {            t.source === e && "string" == typeof t.data && 0 === t.data.indexOf(o) && y(+t.data.slice(o.length))          }, e.addEventListener ? e.addEventListener("message", s, !1) : e.attachEvent("onmessage", s), i = function (t) {            e.postMessage(o + t, "*")          }), d.setImmediate = function (e) {            "function" != typeof e && (e = new Function("" + e));            for (var t = new Array(arguments.length - 1), n = 0; n < t.length; n++) t[n] = arguments[n + 1];            var a = {              callback: e,              args: t            };            return u[l] = a, i(l), l++          }, d.clearImmediate = h        }        function h(e) {          delete u[e]        }        function y(e) {          if (c) setTimeout(y, 0, e);          else {            var t = u[e];            if (t) {              c = !0;              try {                ! function (e) {                  var t = e.callback,                    i = e.args;                  switch (i.length) {                    case 0:                      t();                      break;                    case 1:                      t(i[0]);                      break;                    case 2:                      t(i[0], i[1]);                      break;                    case 3:                      t(i[0], i[1], i[2]);                      break;                    default:                      t.apply(n, i)                  }                }(t)              } finally {                h(e), c = !1              }            }          }        }      }("undefined" == typeof self ? void 0 === e ? void 0 : e : self)    }).call(this, n(4), n(34))  }, function (e, t, n) {    "use strict";    var i = Function.prototype.apply;    function a(e, t) {      this._id = e, this._clearFn = t    }    t.setTimeout = function () {      return new a(i.call(setTimeout, window, arguments), clearTimeout)    }, t.setInterval = function () {      return new a(i.call(setInterval, window, arguments), clearInterval)    }, t.clearTimeout = t.clearInterval = function (e) {      e && e.close()    }, a.prototype.unref = a.prototype.ref = function () {}, a.prototype.close = function () {      this._clearFn.call(window, this._id)    }, t.enroll = function (e, t) {      clearTimeout(e._idleTimeoutId), e._idleTimeout = t    }, t.unenroll = function (e) {      clearTimeout(e._idleTimeoutId), e._idleTimeout = -1    }, t._unrefActive = t.active = function (e) {      clearTimeout(e._idleTimeoutId);      var t = e._idleTimeout;      t >= 0 && (e._idleTimeoutId = setTimeout(function () {        e._onTimeout && e._onTimeout()      }, t))    }, n(35), t.setImmediate = setImmediate, t.clearImmediate = clearImmediate  }, function (e, t, n) {    "use strict";    (function (t) {      var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {          return typeof e        } : function (e) {          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e        },        i = setTimeout;      function a() {}      function r(e) {        if (!(this instanceof r)) throw new TypeError("Promises must be constructed via new");        if ("function" != typeof e) throw new TypeError("not a function");        this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], c(e, this)      }      function o(e, t) {        for (; 3 === e._state;) e = e._value;        0 !== e._state ? (e._handled = !0, r._immediateFn(function () {          var n = 1 === e._state ? t.onFulfilled : t.onRejected;          if (null !== n) {            var i;            try {              i = n(e._value)            } catch (e) {              return void l(t.promise, e)            }            s(t.promise, i)          } else(1 === e._state ? s : l)(t.promise, e._value)        })) : e._deferreds.push(t)      }      function s(e, t) {        try {          if (t === e) throw new TypeError("A promise cannot be resolved with itself.");          if (t && ("object" === (void 0 === t ? "undefined" : n(t)) || "function" == typeof t)) {            var i = t.then;            if (t instanceof r) return e._state = 3, e._value = t, void u(e);            if ("function" == typeof i) return void c((a = i, o = t, function () {              a.apply(o, arguments)            }), e)          }          e._state = 1, e._value = t, u(e)        } catch (t) {          l(e, t)        }        var a, o      }      function l(e, t) {        e._state = 2, e._value = t, u(e)      }      function u(e) {        2 === e._state && 0 === e._deferreds.length && r._immediateFn(function () {          e._handled || r._unhandledRejectionFn(e._value)        });        for (var t = 0, n = e._deferreds.length; t < n; t++) o(e, e._deferreds[t]);        e._deferreds = null      }      function c(e, t) {        var n = !1;        try {          e(function (e) {            n || (n = !0, s(t, e))          }, function (e) {            n || (n = !0, l(t, e))          })        } catch (e) {          if (n) return;          n = !0, l(t, e)        }      }      r.prototype.catch = function (e) {        return this.then(null, e)      }, r.prototype.then = function (e, t) {        var n = new this.constructor(a);        return o(this, new function (e, t, n) {          this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.promise = n        }(e, t, n)), n      }, r.prototype.finally = function (e) {        var t = this.constructor;        return this.then(function (n) {          return t.resolve(e()).then(function () {            return n          })        }, function (n) {          return t.resolve(e()).then(function () {            return t.reject(n)          })        })      }, r.all = function (e) {        return new r(function (t, i) {          if (!e || void 0 === e.length) throw new TypeError("Promise.all accepts an array");          var a = Array.prototype.slice.call(e);          if (0 === a.length) return t([]);          var r = a.length;          function o(e, s) {            try {              if (s && ("object" === (void 0 === s ? "undefined" : n(s)) || "function" == typeof s)) {                var l = s.then;                if ("function" == typeof l) return void l.call(s, function (t) {                  o(e, t)                }, i)              }              a[e] = s, 0 == --r && t(a)            } catch (e) {              i(e)            }          }          for (var s = 0; s < a.length; s++) o(s, a[s])        })      }, r.resolve = function (e) {        return e && "object" === (void 0 === e ? "undefined" : n(e)) && e.constructor === r ? e : new r(function (t) {          t(e)        })      }, r.reject = function (e) {        return new r(function (t, n) {          n(e)        })      }, r.race = function (e) {        return new r(function (t, n) {          for (var i = 0, a = e.length; i < a; i++) e[i].then(t, n)        })      }, r._immediateFn = "function" == typeof t && function (e) {        t(e)      } || function (e) {        i(e, 0)      }, r._unhandledRejectionFn = function (e) {        "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", e)      }, e.exports = r    }).call(this, n(36).setImmediate)  }, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    });    var i = function () {        function e(e, t) {          for (var n = 0; n < t.length; n++) {            var i = t[n];            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)          }        }        return function (t, n, i) {          return n && e(t.prototype, n), i && e(t, i), t        }      }(),      a = v(n(37)),      r = v(n(0)),      o = v(n(3)),      s = v(n(18)),      l = v(n(17)),      u = v(n(13)),      c = v(n(12)),      p = v(n(11)),      d = v(n(9)),      h = v(n(8)),      y = v(n(7)),      f = v(n(6));    function v(e) {      return e && e.__esModule ? e : {        default: e      }    }    var m = [],      g = function () {        function e(t) {          if (function (e, t) {              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")            }(this, e), this.options = (0, s.default)(t), this.container = this.options.container, this.paused = !0, this.playedPromise = a.default.resolve(), this.mode = "normal", this.randomOrder = r.default.randomOrder(this.options.audio.length), this.container.classList.add("aplayer"), this.options.lrcType && !this.options.fixed && this.container.classList.add("aplayer-withlrc"), this.options.audio.length > 1 && this.container.classList.add("aplayer-withlist"), r.default.isMobile && this.container.classList.add("aplayer-mobile"), this.arrow = this.container.offsetWidth <= 1 2="==" 3="==" 18 200 300, this.arrow && this.container.classlist.add("aplayer-arrow"), this.container="this.options.container," this.options.lrctype || !0="==" this.options.lrctype) for (var n="this.container.getElementsByClassName("aplayer-lrc-content")," i="0;" < n.length; i++) this.options.audio[i] (this.options.audio[i].lrc="n[i].innerHTML);" this.template="new" l.default({ container: this.container, options: this.options, randomorder: this.randomorder }), this.options.fixed (this.container.classlist.add("aplayer-fixed"), this.template.body.style.width="this.template.body.offsetWidth" - + "px"), this.options.mini (this.setmode("mini"), this.template.info.style.display="block" ), this.template.info.offsetwidth this.template.time.classlist.add("aplayer-time-narrow"), (this.lrc="new" p.default({ this.template.lrc, async: this.options.lrctype, player: this })), this.events="new" y.default, this.storage="new" c.default(this), this.bar="new" u.default(this.template), this.controller="new" d.default(this), this.timer="new" h.default(this), this.list="new" f.default(this), this.initaudio(), this.bindevents(), "random"="==" this.options.order ? this.list.switch(this.randomorder[0]) : this.list.switch(0), this.options.autoplay this.play(), m.push(this) } return i(e, [{ key: "initaudio", value: function () { var e="this;" this.audio="document.createElement("audio")," this.audio.preload="this.options.preload;" t="function" (t) e.audio.addeventlistener(e.events.audioevents[t], (n) e.events.trigger(e.events.audioevents[t], n) }) }, this.events.audioevents.length; n++) t(n); this.volume(this.storage.get("volume"), !0) "bindevents", this.on("play", e.paused e.setuiplaying() this.on("pause", e.setuipaused() this.on("timeupdate", if (!e.disabletimeupdate) e.bar.set("played", e.audio.currenttime e.duration, "width"), e.lrc e.lrc.update(); e.template.ptime.innerhtml !="=" (e.template.ptime.innerhtml="t)" this.on("durationchange", e.duration (e.template.dtime.innerhtml="r.default.secondToTime(e.duration))" this.on("progress", e.audio.buffered.end(e.audio.buffered.length 1) 0; e.bar.set("loaded", t, "width") }); this.on("error", e.list.audios.length> 1 ? (e.notice("An audio error has occurred, player will skip forward in 2 seconds."), t = setTimeout(function () {                e.skipForward(), e.paused || e.play()              }, 2e3)) : 1 === e.list.audios.length && e.notice("An audio error has occurred.")            }), this.events.on("listswitch", function () {              t && clearTimeout(t)            }), this.on("ended", function () {              "none" === e.options.loop ? "list" === e.options.order ? e.list.index < e.list.audios.length - 1 ? (e.list.switch((e.list.index + 1) % e.list.audios.length), e.play()) : (e.list.switch((e.list.index + 1) % e.list.audios.length), e.pause()) : "random" === e.options.order && (e.randomOrder.indexOf(e.list.index) < e.randomOrder.length - 1 ? (e.list.switch(e.nextIndex()), e.play()) : (e.list.switch(e.nextIndex()), e.pause())) : "one" === e.options.loop ? (e.list.switch(e.list.index), e.play()) : "all" === e.options.loop && (e.skipForward(), e.play())            })          }        }, {          key: "setAudio",          value: function (e) {            this.hls && (this.hls.destroy(), this.hls = null);            var t = e.type;            this.options.customAudioType && this.options.customAudioType[t] ? "[object Function]" === Object.prototype.toString.call(this.options.customAudioType[t]) ? this.options.customAudioType[t](this.audio, e, this) : console.error("Illegal customType: " + t) : (t && "auto" !== t || (t = /m3u8(#|\?|$)/i.exec(e.url) ? "hls" : "normal"), "hls" === t ? Hls.isSupported() ? (this.hls = new Hls, this.hls.loadSource(e.url), this.hls.attachMedia(this.audio)) : this.audio.canPlayType("application/x-mpegURL") || this.audio.canPlayType("application/vnd.apple.mpegURL") ? this.audio.src = e.url : this.notice("Error: HLS is not supported.") : "normal" === t && (this.audio.src = e.url)), this.seek(0), this.paused || this.audio.play()          }        }, {          key: "theme",          value: function () {            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.list.audios[this.list.index].theme || this.options.theme,              t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.list.index;            (!(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]) && this.list.audios[t] && (this.list.audios[t].theme = e), this.template.listCurs[t] && (this.template.listCurs[t].style.backgroundColor = e), t === this.list.index && (this.template.pic.style.backgroundColor = e, this.template.played.style.background = e, this.template.thumb.style.background = e, this.template.volume.style.background = e)          }        }, {          key: "seek",          value: function (e) {            e = Math.max(e, 0), e = Math.min(e, this.duration), this.audio.currentTime = e, this.bar.set("played", e / this.duration, "width"), this.template.ptime.innerHTML = r.default.secondToTime(e)          }        }, {          key: "setUIPlaying",          value: function () {            var e = this;            if (this.paused && (this.paused = !1, this.template.button.classList.remove("aplayer-play"), this.template.button.classList.add("aplayer-pause"), this.template.button.innerHTML = "", setTimeout(function () {                e.template.button.innerHTML = o.default.pause              }, 100), this.template.skipPlayButton.innerHTML = o.default.pause), this.timer.enable("loading"), this.options.mutex)              for (var t = 0; t < m.length; t++) this !== m[t] && m[t].pause()          }        }, {          key: "play",          value: function () {            var e = this;            this.setUIPlaying();            var t = this.audio.play();            t && t.catch(function (t) {              console.warn(t), "NotAllowedError" === t.name && e.setUIPaused()            })          }        }, {          key: "setUIPaused",          value: function () {            var e = this;            this.paused || (this.paused = !0, this.template.button.classList.remove("aplayer-pause"), this.template.button.classList.add("aplayer-play"), this.template.button.innerHTML = "", setTimeout(function () {              e.template.button.innerHTML = o.default.play            }, 100), this.template.skipPlayButton.innerHTML = o.default.play), this.container.classList.remove("aplayer-loading"), this.timer.disable("loading")          }        }, {          key: "pause",          value: function () {            this.setUIPaused(), this.audio.pause()          }        }, {          key: "switchVolumeIcon",          value: function () {            this.volume() >= .95 ? this.template.volumeButton.innerHTML = o.default.volumeUp : this.volume() > 0 ? this.template.volumeButton.innerHTML = o.default.volumeDown : this.template.volumeButton.innerHTML = o.default.volumeOff          }        }, {          key: "volume",          value: function (e, t) {            return e = parseFloat(e), isNaN(e) || (e = Math.max(e, 0), e = Math.min(e, 1), this.bar.set("volume", e, "height"), t || this.storage.set("volume", e), this.audio.volume = e, this.audio.muted && (this.audio.muted = !1), this.switchVolumeIcon()), this.audio.muted ? 0 : this.audio.volume          }        }, {          key: "on",          value: function (e, t) {            this.events.on(e, t)          }        }, {          key: "toggle",          value: function () {            this.template.button.classList.contains("aplayer-play") ? this.play() : this.template.button.classList.contains("aplayer-pause") && this.pause()          }        }, {          key: "switchAudio",          value: function (e) {            this.list.switch(e)          }        }, {          key: "addAudio",          value: function (e) {            this.list.add(e)          }        }, {          key: "removeAudio",          value: function (e) {            this.list.remove(e)          }        }, {          key: "destroy",          value: function () {            m.splice(m.indexOf(this), 1), this.pause(), this.container.innerHTML = "", this.audio.src = "", this.timer.destroy(), this.events.trigger("destroy")          }        }, {          key: "setMode",          value: function () {            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "normal";            this.mode = e, "mini" === e ? this.container.classList.add("aplayer-narrow") : "normal" === e && this.container.classList.remove("aplayer-narrow")          }        }, {          key: "notice",          value: function (e) {            var t = this,              n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2e3,              i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .8;            this.template.notice.innerHTML = e, this.template.notice.style.opacity = i, this.noticeTime && clearTimeout(this.noticeTime), this.events.trigger("noticeshow", {              text: e            }), n && (this.noticeTime = setTimeout(function () {              t.template.notice.style.opacity = 0, t.events.trigger("noticehide")            }, n))          }        }, {          key: "prevIndex",          value: function () {            if (!(this.list.audios.length > 1)) return 0;            if ("list" === this.options.order) return this.list.index - 1 < 0 ? this.list.audios.length - 1 : this.list.index - 1;            if ("random" === this.options.order) {              var e = this.randomOrder.indexOf(this.list.index);              return 0 === e ? this.randomOrder[this.randomOrder.length - 1] : this.randomOrder[e - 1]            }          }        }, {          key: "nextIndex",          value: function () {            if (!(this.list.audios.length > 1)) return 0;            if ("list" === this.options.order) return (this.list.index + 1) % this.list.audios.length;            if ("random" === this.options.order) {              var e = this.randomOrder.indexOf(this.list.index);              return e === this.randomOrder.length - 1 ? this.randomOrder[0] : this.randomOrder[e + 1]            }          }        }, {          key: "skipBack",          value: function () {            this.list.switch(this.prevIndex())          }        }, {          key: "skipForward",          value: function () {            this.list.switch(this.nextIndex())          }        }, {          key: "duration",          get: function () {            return isNaN(this.audio.duration) ? 0 : this.audio.duration          }        }], [{          key: "version",          get: function () {            return "1.10.1"          }        }]), e      }();    t.default = g  }, , function (e, t, n) {}, function (e, t, n) {    "use strict";    Object.defineProperty(t, "__esModule", {      value: !0    }), n(40);    var i, a = n(38),      r = (i = a) && i.__esModule ? i : {        default: i      };    console.log("\n %c APlayer v1.10.1 af84efb %c http://aplayer.js.org \n", "color: #fadfa3; background: #030307; padding:5px 0;", "background: #fadfa3; padding:5px 0;"), t.default = r.default  }]).default});//# sourceMappingURL=APlayer.min.js.map</=></div></(\d{2}):(\d{2})(\.(\d{2,3}))?></p",>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
